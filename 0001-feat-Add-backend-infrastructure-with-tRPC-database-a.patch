From c49a0cfc0f8dc40bfbcf365ef9ee077e8e8f0021 Mon Sep 17 00:00:00 2001
From: Ubuntu
 <azureuser@fushumagov.eq0bs5bisoyunj2bwwhx4ibtjg.jx.internal.cloudapp.net>
Date: Thu, 30 Oct 2025 10:07:44 +0000
Subject: [PATCH] feat: Add backend infrastructure with tRPC, database, and API
 routers

- Downgrade Tailwind CSS from 4.x to 3.4.17 for stability
- Add PostCSS configuration for Tailwind compilation
- Set up Drizzle ORM with MySQL database connection
- Implement tRPC with context, procedures, and middleware
- Add authentication router with Web3 wallet support
- Add grants router (list, getById, create)
- Add news router (list, getById, search, categories)
- Import database schema from V1
- Add shared constants directory
- Fix CSS compilation issues
- Add PM2 ecosystem config and startup script
---
 ecosystem.config.cjs                 |   8 +
 package.json                         |  14 +-
 pnpm-lock.yaml                       | 661 ++++++++++++++++++++++++---
 postcss.config.cjs                   |   6 +
 src/app/api/trpc/[trpc]/route.ts     |  18 +-
 src/app/globals.css                  |  27 +-
 src/db/index.ts                      |  17 +
 src/db/schema.ts                     | 439 ++++++++++++++++++
 src/lib/trpc/server.ts               |  15 +-
 src/server/_core/context.ts          |  54 +++
 src/server/_core/public              |   1 +
 src/server/_core/trpc.ts             |  27 ++
 src/server/_core/types/cookie.d.ts   |   6 +
 src/server/_core/types/manusTypes.ts |  69 +++
 src/server/_core/web3Auth.ts         |  61 +++
 src/server/index.ts                  |   4 +
 src/server/routers/auth.ts           | 149 ++++++
 src/server/routers/grants.ts         |  97 ++++
 src/server/routers/index.ts          |  12 +
 src/server/routers/news.ts           | 116 +++++
 src/server/validation.ts             | 175 +++++++
 src/shared/const.ts                  |  46 ++
 start.sh                             |   4 +
 tsconfig.json                        |   9 +-
 24 files changed, 1925 insertions(+), 110 deletions(-)
 create mode 100644 ecosystem.config.cjs
 create mode 100644 postcss.config.cjs
 create mode 100644 src/db/index.ts
 create mode 100644 src/db/schema.ts
 create mode 100644 src/server/_core/context.ts
 create mode 120000 src/server/_core/public
 create mode 100644 src/server/_core/trpc.ts
 create mode 100644 src/server/_core/types/cookie.d.ts
 create mode 100644 src/server/_core/types/manusTypes.ts
 create mode 100644 src/server/_core/web3Auth.ts
 create mode 100644 src/server/index.ts
 create mode 100644 src/server/routers/auth.ts
 create mode 100644 src/server/routers/grants.ts
 create mode 100644 src/server/routers/index.ts
 create mode 100644 src/server/routers/news.ts
 create mode 100644 src/server/validation.ts
 create mode 100644 src/shared/const.ts
 create mode 100755 start.sh

diff --git a/ecosystem.config.cjs b/ecosystem.config.cjs
new file mode 100644
index 0000000..3d117ba
--- /dev/null
+++ b/ecosystem.config.cjs
@@ -0,0 +1,8 @@
+module.exports = {
+  apps: [{
+    name: "fushuma-v2",
+    script: "./start.sh",
+    cwd: "/home/azureuser/fushuma-gov-hub-v2",
+    interpreter: "/bin/bash"
+  }]
+}
diff --git a/package.json b/package.json
index c13bb0c..ce6f789 100644
--- a/package.json
+++ b/package.json
@@ -51,6 +51,7 @@
     "@uniswap/v3-periphery": "^1.4.3",
     "@uniswap/v3-sdk": "^3.10.0",
     "axios": "^1.12.2",
+    "bcrypt": "^6.0.0",
     "chart.js": "^4.5.0",
     "chartjs-adapter-date-fns": "^3.0.0",
     "class-variance-authority": "^0.7.1",
@@ -59,11 +60,12 @@
     "drizzle-orm": "^0.44.7",
     "ethers": "^5.7.2",
     "graphql-request": "^7.2.0",
-    "ioredis": "^5.4.1",
+    "ioredis": "^5.8.2",
     "jose": "^6.1.0",
     "jsbi": "^4.3.0",
+    "jsonwebtoken": "^9.0.2",
     "lucide-react": "^0.468.0",
-    "mysql2": "^3.12.0",
+    "mysql2": "^3.15.3",
     "nanoid": "^5.1.6",
     "next": "^16.0.0",
     "next-themes": "^0.4.6",
@@ -77,21 +79,25 @@
     "sonner": "^1.7.4",
     "superjson": "^2.2.2",
     "tailwind-merge": "^2.6.0",
-    "tailwindcss": "^4.1.16",
     "viem": "^2.38.4",
     "wagmi": "^2.18.2",
     "zod": "^4.1.12",
     "zustand": "^5.0.8"
   },
   "devDependencies": {
+    "@types/bcrypt": "^6.0.0",
+    "@types/jsonwebtoken": "^9.0.10",
     "@types/node": "^22.13.9",
     "@types/react": "^19.2.2",
     "@types/react-dom": "^19.2.1",
     "@typescript-eslint/eslint-plugin": "^8.19.1",
     "@typescript-eslint/parser": "^8.19.1",
-    "drizzle-kit": "^0.30.1",
+    "autoprefixer": "^10.4.21",
+    "drizzle-kit": "^0.30.6",
     "eslint": "^9.18.0",
     "eslint-config-next": "^16.0.0",
+    "postcss": "^8.5.6",
+    "tailwindcss": "3.4.17",
     "typescript": "^5.9.3"
   },
   "engines": {
diff --git a/pnpm-lock.yaml b/pnpm-lock.yaml
index 34b1eee..2888e45 100644
--- a/pnpm-lock.yaml
+++ b/pnpm-lock.yaml
@@ -85,7 +85,7 @@ importers:
         version: 2.2.9(@tanstack/react-query@5.90.5(react@19.2.0))(@types/react@19.2.2)(react-dom@19.2.0(react@19.2.0))(react@19.2.0)(typescript@5.9.3)(viem@2.38.5(bufferutil@4.0.9)(typescript@5.9.3)(utf-8-validate@5.0.10)(zod@4.1.12))(wagmi@2.19.0(@tanstack/query-core@5.90.5)(@tanstack/react-query@5.90.5(react@19.2.0))(@types/react@19.2.2)(bufferutil@4.0.9)(ioredis@5.8.2)(react@19.2.0)(typescript@5.9.3)(utf-8-validate@5.0.10)(viem@2.38.5(bufferutil@4.0.9)(typescript@5.9.3)(utf-8-validate@5.0.10)(zod@4.1.12))(zod@4.1.12))
       '@tailwindcss/typography':
         specifier: ^0.5.19
-        version: 0.5.19(tailwindcss@4.1.16)
+        version: 0.5.19(tailwindcss@3.4.17)
       '@tanstack/react-query':
         specifier: ^5.90.5
         version: 5.90.5(react@19.2.0)
@@ -113,6 +113,9 @@ importers:
       axios:
         specifier: ^1.12.2
         version: 1.13.0
+      bcrypt:
+        specifier: ^6.0.0
+        version: 6.0.0
       chart.js:
         specifier: ^4.5.0
         version: 4.5.1
@@ -138,7 +141,7 @@ importers:
         specifier: ^7.2.0
         version: 7.3.1(graphql@16.11.0)
       ioredis:
-        specifier: ^5.4.1
+        specifier: ^5.8.2
         version: 5.8.2
       jose:
         specifier: ^6.1.0
@@ -146,11 +149,14 @@ importers:
       jsbi:
         specifier: ^4.3.0
         version: 4.3.2
+      jsonwebtoken:
+        specifier: ^9.0.2
+        version: 9.0.2
       lucide-react:
         specifier: ^0.468.0
         version: 0.468.0(react@19.2.0)
       mysql2:
-        specifier: ^3.12.0
+        specifier: ^3.15.3
         version: 3.15.3
       nanoid:
         specifier: ^5.1.6
@@ -191,9 +197,6 @@ importers:
       tailwind-merge:
         specifier: ^2.6.0
         version: 2.6.0
-      tailwindcss:
-        specifier: ^4.1.16
-        version: 4.1.16
       viem:
         specifier: ^2.38.4
         version: 2.38.5(bufferutil@4.0.9)(typescript@5.9.3)(utf-8-validate@5.0.10)(zod@4.1.12)
@@ -207,6 +210,12 @@ importers:
         specifier: ^5.0.8
         version: 5.0.8(@types/react@19.2.2)(react@19.2.0)(use-sync-external-store@1.4.0(react@19.2.0))
     devDependencies:
+      '@types/bcrypt':
+        specifier: ^6.0.0
+        version: 6.0.0
+      '@types/jsonwebtoken':
+        specifier: ^9.0.10
+        version: 9.0.10
       '@types/node':
         specifier: ^22.13.9
         version: 22.18.12
@@ -218,19 +227,28 @@ importers:
         version: 19.2.2(@types/react@19.2.2)
       '@typescript-eslint/eslint-plugin':
         specifier: ^8.19.1
-        version: 8.46.2(@typescript-eslint/parser@8.46.2(eslint@9.38.0)(typescript@5.9.3))(eslint@9.38.0)(typescript@5.9.3)
+        version: 8.46.2(@typescript-eslint/parser@8.46.2(eslint@9.38.0(jiti@1.21.7))(typescript@5.9.3))(eslint@9.38.0(jiti@1.21.7))(typescript@5.9.3)
       '@typescript-eslint/parser':
         specifier: ^8.19.1
-        version: 8.46.2(eslint@9.38.0)(typescript@5.9.3)
+        version: 8.46.2(eslint@9.38.0(jiti@1.21.7))(typescript@5.9.3)
+      autoprefixer:
+        specifier: ^10.4.21
+        version: 10.4.21(postcss@8.5.6)
       drizzle-kit:
-        specifier: ^0.30.1
+        specifier: ^0.30.6
         version: 0.30.6
       eslint:
         specifier: ^9.18.0
-        version: 9.38.0
+        version: 9.38.0(jiti@1.21.7)
       eslint-config-next:
         specifier: ^16.0.0
-        version: 16.0.0(@typescript-eslint/parser@8.46.2(eslint@9.38.0)(typescript@5.9.3))(eslint@9.38.0)(typescript@5.9.3)
+        version: 16.0.0(@typescript-eslint/parser@8.46.2(eslint@9.38.0(jiti@1.21.7))(typescript@5.9.3))(eslint@9.38.0(jiti@1.21.7))(typescript@5.9.3)
+      postcss:
+        specifier: ^8.5.6
+        version: 8.5.6
+      tailwindcss:
+        specifier: 3.4.17
+        version: 3.4.17
       typescript:
         specifier: ^5.9.3
         version: 5.9.3
@@ -240,6 +258,10 @@ packages:
   '@adraffy/ens-normalize@1.11.1':
     resolution: {integrity: sha512-nhCBV3quEgesuf7c7KYfperqSS14T8bYuvJ8PcLJp6znkZpFc0AuW4qBtr8eKVyPPe/8RSr7sglCWPU5eaxwKQ==}
 
+  '@alloc/quick-lru@5.2.0':
+    resolution: {integrity: sha512-UrcABB+4bUrFABwbluTIBErXwvbsU/V7TZWfmbgJfbkwiBuziS9gxdODUyuiecfdGQ85jglMW6juS3+z5TsKLw==}
+    engines: {node: '>=10'}
+
   '@babel/code-frame@7.27.1':
     resolution: {integrity: sha512-cjQ7ZlQ0Mv3b47hABuTevyTuYN4i+loJKGeV9flcCgIK37cCXRh+L1bd3iBHlynerhQ7BhCkn2BPbQUL+rGqFg==}
     engines: {node: '>=6.9.0'}
@@ -968,6 +990,10 @@ packages:
   '@ioredis/commands@1.4.0':
     resolution: {integrity: sha512-aFT2yemJJo+TZCmieA7qnYGQooOS7QfNmYrzGtsYd3g9j5iDP8AimYYAesf79ohjbLG12XxC4nG5DyEnC88AsQ==}
 
+  '@isaacs/cliui@8.0.2':
+    resolution: {integrity: sha512-O8jcjabXaleOG9DQ0+ARXWZBTfnP4WNAqzuiJK7ll44AmxGKv/J2M4TPjxjY3znBCfvBXFzucm1twdyFybFqEA==}
+    engines: {node: '>=12'}
+
   '@jridgewell/gen-mapping@0.3.13':
     resolution: {integrity: sha512-2kkt/7niJ6MgEPxF0bYdQ6etZaA+fQvDcLKckhy1yIQOzaoKjBBjSj63/aLVjYE3qhRt5dvM+uUyfCg6UKCBbA==}
 
@@ -1361,6 +1387,10 @@ packages:
   '@petamoriken/float16@3.9.3':
     resolution: {integrity: sha512-8awtpHXCx/bNpFt4mt2xdkgtgVvKqty8VbjHI/WWWQuEw+KLzFot3f4+LkQY9YmOtq7A5GdOnqoIC8Pdygjk2g==}
 
+  '@pkgjs/parseargs@0.11.0':
+    resolution: {integrity: sha512-+1VkjdD0QBLPodGrJUeqarH8VAIvQODIbwh9XpP5Syisf7YoQgsJKPNFoqqLQlu+VQ/tVSshMR6loPMn8U+dPg==}
+    engines: {node: '>=14'}
+
   '@radix-ui/number@1.1.1':
     resolution: {integrity: sha512-MkKCwxlXTgz6CFoJx3pCwn07GKp36+aZyu/u2Ln2VrA5DcdyCZkASEDBTd8x5whTQQL5CiYf4prXKLcgQdv29g==}
 
@@ -2140,6 +2170,9 @@ packages:
   '@tybys/wasm-util@0.10.1':
     resolution: {integrity: sha512-9tTaPJLSiejZKx+Bmog4uSubteqTvFrVrURwkmHixBo0G4seD0zUxp98E1DzUBJxLQ3NPwXrGKDiVjwx/DpPsg==}
 
+  '@types/bcrypt@6.0.0':
+    resolution: {integrity: sha512-/oJGukuH3D2+D+3H4JWLaAsJ/ji86dhRidzZ/Od7H/i8g+aCmvkeCc6Ni/f9uxGLSQVCRZkX2/lqEFG2BvWtlQ==}
+
   '@types/connect@3.4.38':
     resolution: {integrity: sha512-K6uROf1LD88uDQqJCktA4yzL1YYAK6NgfsI0v/mTgyPKWsX1CnJ0XPSDhViejru1GcRkLWb8RlzFYJRqGUbaug==}
 
@@ -2161,6 +2194,9 @@ packages:
   '@types/json5@0.0.29':
     resolution: {integrity: sha512-dRLjCWHYg4oaA77cxO64oO+7JwCwnIzkZPdrrC71jQmQtlhM556pwKo5bUzqvZndkVbeFLIIi+9TC40JNF5hNQ==}
 
+  '@types/jsonwebtoken@9.0.10':
+    resolution: {integrity: sha512-asx5hIG9Qmf/1oStypjanR7iKTv0gXQ1Ov/jfrX6kS/EO0OFni8orbmGCn0672NHR3kXHwpAwR+B368ZGN/2rA==}
+
   '@types/lodash@4.17.20':
     resolution: {integrity: sha512-H3MHACvFUEiujabxhaI/ImO6gUrd8oOurg7LQtS7mbwIXA/cUqWrvBsaeJ23aZEPk1TAYkurjfMbSELfoCXlGA==}
 
@@ -2606,14 +2642,28 @@ packages:
     resolution: {integrity: sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==}
     engines: {node: '>=8'}
 
+  ansi-regex@6.2.2:
+    resolution: {integrity: sha512-Bq3SmSpyFHaWjPk8If9yc6svM8c56dB5BAtW4Qbw5jHTwwXXcTLoRMkpDJp6VL0XzlWaCHTXrkFURMYmD0sLqg==}
+    engines: {node: '>=12'}
+
   ansi-styles@4.3.0:
     resolution: {integrity: sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==}
     engines: {node: '>=8'}
 
+  ansi-styles@6.2.3:
+    resolution: {integrity: sha512-4Dj6M28JB+oAH8kFkTLUo+a2jwOFkuqb3yucU0CANcRRUbxS0cP0nZYCGjcc3BNXwRIsUVmDGgzawme7zvJHvg==}
+    engines: {node: '>=12'}
+
+  any-promise@1.3.0:
+    resolution: {integrity: sha512-7UvmKalWRt1wgjL1RrGxoSJW/0QZFIegpeGvZG9kjp8vrRu55XTHbwnqq2GpXm9uLbcuhxm3IqX9OB4MZR1b2A==}
+
   anymatch@3.1.3:
     resolution: {integrity: sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==}
     engines: {node: '>= 8'}
 
+  arg@5.0.2:
+    resolution: {integrity: sha512-PYjyFOLKQ9y57JvQ6QLo8dAgNqswh8M1RMJYdQduT6xbWSgK36P/Z/v+p888pM69jMMfS8Xd8F6I1kQ/I9HUGg==}
+
   argparse@2.0.1:
     resolution: {integrity: sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==}
 
@@ -2674,6 +2724,13 @@ packages:
     resolution: {integrity: sha512-kNOjDqAh7px0XWNI+4QbzoiR/nTkHAWNud2uvnJquD1/x5a7EQZMJT0AczqK0Qn67oY/TTQ1LbUKajZpp3I9tQ==}
     engines: {node: '>=8.0.0'}
 
+  autoprefixer@10.4.21:
+    resolution: {integrity: sha512-O+A6LWV5LDHSJD3LjHYoNi4VLsj/Whi7k6zG12xTYaU4cQ8oxQGckXNX8cRHK5yOZ/ppVHe0ZBXGzSV9jXdVbQ==}
+    engines: {node: ^10 || ^12 || >=14}
+    hasBin: true
+    peerDependencies:
+      postcss: ^8.1.0
+
   available-typed-arrays@1.0.7:
     resolution: {integrity: sha512-wvUjBtSGN7+7SjNpq/9M2Tg350UZD3q62IFZLbRAR1bSMlCo1ZaeW+BJ+D090e4hIIZLBcTDWe4Mh4jvUDajzQ==}
     engines: {node: '>= 0.4'}
@@ -2715,6 +2772,10 @@ packages:
     resolution: {integrity: sha512-JMWsdF+O8Orq3EMukbUN1QfbLK9mX2CkUmQBcW2T0s8OmdAUL5LLM/6wFwSrqXzlXB13yhyK9gTKS1rIizOduQ==}
     hasBin: true
 
+  bcrypt@6.0.0:
+    resolution: {integrity: sha512-cU8v/EGSrnH+HnxV2z0J7/blxH8gq7Xh2JFT6Aroax7UohdmiJJlxApMxtKfuI7z68NvvVcmR78k2LbT6efhRg==}
+    engines: {node: '>= 18'}
+
   bech32@1.1.4:
     resolution: {integrity: sha512-s0IrSOzLlbvX7yp4WBfPITzpAU8sqQcpsmwXDiKwrG4r491vwCO/XpejasRNl0piBMe/DvP4Tz0mIS/X1DPJBQ==}
 
@@ -2784,6 +2845,9 @@ packages:
   bs58@6.0.0:
     resolution: {integrity: sha512-PD0wEnEYg6ijszw/u8s+iI3H17cTymlrwkKhDhPZq+Sokl3AU4htyBFTjAeNAlCCmg0f53g6ih3jATyCKftTfw==}
 
+  buffer-equal-constant-time@1.0.1:
+    resolution: {integrity: sha512-zRpUiDwd/xk6ADqPMATG8vc9VPrkck7T07OIx0gnjmJAnHnTVXNQG3vfvWNuiZIkwu9KrKdA1iJKfsfTVxE6NA==}
+
   buffer-from@1.1.2:
     resolution: {integrity: sha512-E+XQCRwSbaaiChtv6k6Dwgc+bx+Bs6vuKJHHl5kox/BaKbhiXzqQOwK4cO22yElGp2OCmjwVhT3HmxgyPGnJfQ==}
 
@@ -2814,6 +2878,10 @@ packages:
     resolution: {integrity: sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==}
     engines: {node: '>=6'}
 
+  camelcase-css@2.0.1:
+    resolution: {integrity: sha512-QOSvevhslijgYwRx6Rv7zKdMF8lbRmx+uQGx2+vDc+KI/eBnsy9kit5aj23AgGu3pa4t9AgwbnXWqS+iOY+2aA==}
+    engines: {node: '>= 6'}
+
   camelcase@5.3.1:
     resolution: {integrity: sha512-L28STB170nwWS63UjtlEOE3dldQApaJXZkOI1uMFfzf3rRuPegHaHesyee+YxQ+W6SvRDQV6UrdOdRiR153wJg==}
     engines: {node: '>=6'}
@@ -2929,6 +2997,10 @@ packages:
   commander@2.20.3:
     resolution: {integrity: sha512-GpVkmM8vF2vQUkj2LvZmD35JxeJOLCwJ9cUkugyk2nuhbv3+mJvpLYYt+0+USMxE+oj+ey/lJEnhZw75x/OMcQ==}
 
+  commander@4.1.1:
+    resolution: {integrity: sha512-NOKm8xhkzAjzFx8B2v5OAHT+u5pRQc2UCa2Vq9jYL/31o2wi9mxBA7LIFs3sV5VSC49z6pEhfbMULvShKj26WA==}
+    engines: {node: '>= 6'}
+
   commander@8.3.0:
     resolution: {integrity: sha512-OkTL9umf+He2DZkUq8f8J9of7yL6RJKI24dVITBmNfZBmri9zYZQrKkuXiKhyfPSu8tUhnVBB1iKXevvnlR4Ww==}
     engines: {node: '>= 12'}
@@ -3135,6 +3207,9 @@ packages:
   devlop@1.1.0:
     resolution: {integrity: sha512-RWmIqhcFf1lRYBvNmr7qTNuyCt/7/ns2jbpp1+PalgE/rDQcBT0fioSMUpJ93irlUhC5hrg4cYqe6U+0ImW0rA==}
 
+  didyoumean@1.2.2:
+    resolution: {integrity: sha512-gxtyfqMg7GKyhQmb056K7M3xszy/myH8w+B4RT+QXBQsvAOdc3XymqDDPHx1BgPgsdAA5SIifona89YtRATDzw==}
+
   diff@5.2.0:
     resolution: {integrity: sha512-uIFDxqpRZGZ6ThOk84hEfqWoHx2devRFvpTZcTHur85vImfaxUbTW9Ryh4CpCuDnToOP1CEtXKIgytHBPVff5A==}
     engines: {node: '>=0.3.1'}
@@ -3142,6 +3217,9 @@ packages:
   dijkstrajs@1.0.3:
     resolution: {integrity: sha512-qiSlmBq9+BCdCA/L46dw8Uy93mloxsPSbwnm5yrKn2vMPiy8KyAskTF6zuV/j5BMsmOGZDPs7KjU+mjb670kfA==}
 
+  dlv@1.1.3:
+    resolution: {integrity: sha512-+HlytyjlPKnIG8XuRG8WvmBP8xs8P71y+SKKS6ZXWoEgLuePxtDoUEiH7WkdePWrQ5JBpE6aoVqfZfJUQkjXwA==}
+
   doctrine@2.1.0:
     resolution: {integrity: sha512-35mSku4ZXK0vfCuHEDAwt55dg2jNajHZ1odvF+8SSr82EsZY4QmXfuWso8oEd8zRhVObSN18aM0CjSdoBX7zIw==}
     engines: {node: '>=0.10.0'}
@@ -3253,6 +3331,12 @@ packages:
   duplexify@4.1.3:
     resolution: {integrity: sha512-M3BmBhwJRZsSx38lZyhE53Csddgzl5R7xGJNk7CVddZD6CcmwMCH8J+7AprIrQKH7TonKxaCjcv27Qmf+sQ+oA==}
 
+  eastasianwidth@0.2.0:
+    resolution: {integrity: sha512-I88TYZWc9XiYHRQ4/3c5rjjfgkjhLyW2luGIheGERbNQ6OY7yTybanSpDXZa8y7VUP9YmDcYa+eyq4ca7iLqWA==}
+
+  ecdsa-sig-formatter@1.0.11:
+    resolution: {integrity: sha512-nagl3RYrbNv6kQkeJIpt6NJZy8twLB/2vtz6yN9Z4vRKHN4/QZJIEbqohALSgwKdnksuY3k5Addp5lg8sVoVcQ==}
+
   eciesjs@0.4.16:
     resolution: {integrity: sha512-dS5cbA9rA2VR4Ybuvhg6jvdmp46ubLn3E+px8cG/35aEDNclrqoCjg6mt0HYZ/M+OoESS3jSkCrqk1kWAEhWAw==}
     engines: {bun: '>=1', deno: '>=2', node: '>=16'}
@@ -3613,6 +3697,10 @@ packages:
     resolution: {integrity: sha512-dKx12eRCVIzqCxFGplyFKJMPvLEWgmNtUrpTiJIR5u97zEhRG8ySrtboPHZXx7daLxQVrl643cTzbab2tkQjxg==}
     engines: {node: '>= 0.4'}
 
+  foreground-child@3.3.1:
+    resolution: {integrity: sha512-gIXjKqtFuWEgzFRJA9WCQeSJLZDjgJUOMCMzxtvFq/37KojM1BFGufqsCy0r4qSQmYLsZYMeyRqzIWOMup03sw==}
+    engines: {node: '>=14'}
+
   form-data@4.0.4:
     resolution: {integrity: sha512-KrGhL9Q4zjj0kiUt5OO4Mr/A/jlI2jDYs5eHBpYHPcBEVSiipAvn2Ko2HnPe20rmcuuvMHNdZFp+4IlGTMF0Ow==}
     engines: {node: '>= 6'}
@@ -3620,6 +3708,9 @@ packages:
   fp-ts@1.19.3:
     resolution: {integrity: sha512-H5KQDspykdHuztLTg+ajGN0Z2qUjcEf3Ybxc6hLt0k7/zPkn29XnKnxlBPyW2XIddWrGaJBzBl4VLYOtk39yZg==}
 
+  fraction.js@4.3.7:
+    resolution: {integrity: sha512-ZsDfxO51wGAXREY55a7la9LScWpwv9RxIrYABrlvOFBlH/ShPnrtsXeuUIfXKKOVicNxQ+o8JTbJvjS4M89yew==}
+
   fs-extra@7.0.1:
     resolution: {integrity: sha512-YJDaCJZEnBmcbw13fvdAM9AwNOJwOzrE4pqMqBq5nFiEqXUqHwlK4B+3pUw6JNvfSPtX05xFHtYy/1ni01eGCw==}
     engines: {node: '>=6 <7 || >=8'}
@@ -3689,6 +3780,10 @@ packages:
     resolution: {integrity: sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==}
     engines: {node: '>=10.13.0'}
 
+  glob@10.4.5:
+    resolution: {integrity: sha512-7Bv8RF0k6xjo7d4A/PxYLbUCfb6c+Vpd2/mB2yRDlew7Jb5hEXiCD9ibfO7wpk8i4sevK6DFny9h7EYbM3/sHg==}
+    hasBin: true
+
   glob@8.1.0:
     resolution: {integrity: sha512-r8hpEjiQEYlF2QU0df3dS+nxxSIreXQS1qRhMJM0Q5NDdR386C7jb7Hwwod8Fgiuex+k0GFjgft18yvxm5XoCQ==}
     engines: {node: '>=12'}
@@ -4061,11 +4156,18 @@ packages:
     resolution: {integrity: sha512-H0dkQoCa3b2VEeKQBOxFph+JAbcrQdE7KC0UkqwpLmv2EC4P41QXP+rqo9wYodACiG5/WM5s9oDApTU8utwj9g==}
     engines: {node: '>= 0.4'}
 
+  jackspeak@3.4.3:
+    resolution: {integrity: sha512-OGlZQpz2yfahA/Rd1Y8Cd9SIEsqvXkLVoSw/cgwhnhFMDbsQFeZYoJJ7bIZBS9BcamUW96asq/npPWugM+RQBw==}
+
   jayson@4.2.0:
     resolution: {integrity: sha512-VfJ9t1YLwacIubLhONk0KFeosUBwstRWQ0IRT1KDjEjnVnSOVHC3uwugyV7L0c7R9lpVyrUGT2XWiBA1UTtpyg==}
     engines: {node: '>=8'}
     hasBin: true
 
+  jiti@1.21.7:
+    resolution: {integrity: sha512-/imKNG4EbWNrVjoNC/1H5/9GFy+tqjGBHCaSsN+P2RnPqjsLmv6UD3Ej+Kj8nBWaRAwyk7kK5ZUc+OEatnTR3A==}
+    hasBin: true
+
   jose@6.1.0:
     resolution: {integrity: sha512-TTQJyoEoKcC1lscpVDCSsVgYzUDg/0Bt3WE//WiTPK6uOCQC2KZS4MpugbMWt/zyjkopgZoXhZuCi00gLudfUA==}
 
@@ -4125,10 +4227,20 @@ packages:
   jsonfile@4.0.0:
     resolution: {integrity: sha512-m6F1R3z8jjlf2imQHS2Qez5sjKWQzbuuhuJ/FKYFRZvPE3PuHcSMVZzfsLhGVOkfd20obL5SWEBew5ShlquNxg==}
 
+  jsonwebtoken@9.0.2:
+    resolution: {integrity: sha512-PRp66vJ865SSqOlgqS8hujT5U4AOgMfhrwYIuIhfKaoSCZcirrmASQr8CX7cUg+RMih+hgznrjp99o+W4pJLHQ==}
+    engines: {node: '>=12', npm: '>=6'}
+
   jsx-ast-utils@3.3.5:
     resolution: {integrity: sha512-ZZow9HBI5O6EPgSJLUb8n2NKgmVWTwCvHGwFuJlMjvLFqlGG6pjirPhtdsseaLZjSibD8eegzmYpUZwoIlj2cQ==}
     engines: {node: '>=4.0'}
 
+  jwa@1.4.2:
+    resolution: {integrity: sha512-eeH5JO+21J78qMvTIDdBXidBd6nG2kZjg5Ohz/1fpa28Z4CcsWUzJ1ZZyFq/3z3N17aZy+ZuBoHljASbL1WfOw==}
+
+  jws@3.2.2:
+    resolution: {integrity: sha512-YHlZCB6lMTllWDtSPHz/ZXTsi8S00usEV6v1tjq8tOUZzw7DpSDWVXjXDre6ed1w/pd495ODpHZYSdkRTsa0HA==}
+
   keccak@3.0.4:
     resolution: {integrity: sha512-3vKuW0jV8J3XNTzvfyicFR5qvxrSAGl7KIhvgOu5cmWwM7tZRj3fMbj/pfIf4be7aznbc+prBWGjywox/g2Y6Q==}
     engines: {node: '>=10.0.0'}
@@ -4150,6 +4262,13 @@ packages:
     resolution: {integrity: sha512-+bT2uH4E5LGE7h/n3evcS/sQlJXCpIp6ym8OWJ5eV6+67Dsql/LaaT7qJBAt2rzfoa/5QBGBhxDix1dMt2kQKQ==}
     engines: {node: '>= 0.8.0'}
 
+  lilconfig@3.1.3:
+    resolution: {integrity: sha512-/vlFKAoH5Cgt3Ie+JLhRbwOsCQePABiU3tJ1egGvyQ+33R/vcwM2Zl2QR/LzjsBeItPt3oSVXapn+m4nQDvpzw==}
+    engines: {node: '>=14'}
+
+  lines-and-columns@1.2.4:
+    resolution: {integrity: sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg==}
+
   lit-element@4.2.1:
     resolution: {integrity: sha512-WGAWRGzirAgyphK2urmYOV72tlvnxw7YfyLDgQ+OZnM9vQQBQnumQ7jUJe6unEzwGU3ahFOjuz1iz1jjrpCPuw==}
 
@@ -4173,12 +4292,33 @@ packages:
   lodash.defaults@4.2.0:
     resolution: {integrity: sha512-qjxPLHd3r5DnsdGacqOMU6pb/avJzdh9tFX2ymgoZE27BmjXrNy/y4LoaiTeAb+O3gL8AfpJGtqfX/ae2leYYQ==}
 
+  lodash.includes@4.3.0:
+    resolution: {integrity: sha512-W3Bx6mdkRTGtlJISOvVD/lbqjTlPPUDTMnlXZFnVwi9NKJ6tiAk6LVdlhZMm17VZisqhKcgzpO5Wz91PCt5b0w==}
+
   lodash.isarguments@3.1.0:
     resolution: {integrity: sha512-chi4NHZlZqZD18a0imDHnZPrDeBbTtVN7GXMwuGdRH9qotxAjYs3aVLKc7zNOG9eddR5Ksd8rvFEBc9SsggPpg==}
 
+  lodash.isboolean@3.0.3:
+    resolution: {integrity: sha512-Bz5mupy2SVbPHURB98VAcw+aHh4vRV5IPNhILUCsOzRmsTmSQ17jIuqopAentWoehktxGd9e/hbIXq980/1QJg==}
+
+  lodash.isinteger@4.0.4:
+    resolution: {integrity: sha512-DBwtEWN2caHQ9/imiNeEA5ys1JoRtRfY3d7V9wkqtbycnAmTvRRmbHKDV4a0EYc678/dia0jrte4tjYwVBaZUA==}
+
+  lodash.isnumber@3.0.3:
+    resolution: {integrity: sha512-QYqzpfwO3/CWf3XP+Z+tkQsfaLL/EnUlXWVkIk5FUPc4sBdTehEqZONuyRt2P67PXAk+NXmTBcc97zw9t1FQrw==}
+
+  lodash.isplainobject@4.0.6:
+    resolution: {integrity: sha512-oSXzaWypCMHkPC3NvBEaPHf0KsA5mvPrOPgQWDsbg8n7orZ290M0BmC/jgRZ4vcJ6DTAhjrsSYgdsW/F+MFOBA==}
+
+  lodash.isstring@4.0.1:
+    resolution: {integrity: sha512-0wJxfxH1wgO3GrbuP+dTTk7op+6L41QCXbGINEmD+ny/G/eCqGzxyCsh7159S+mgDDcoarnBw6PC1PS5+wUGgw==}
+
   lodash.merge@4.6.2:
     resolution: {integrity: sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==}
 
+  lodash.once@4.1.1:
+    resolution: {integrity: sha512-Sb487aTOCr9drQVL8pIxOzVhafOjZN9UU54hiN8PU3uAiSV7lx1yYNpbNmex2PK6dSJoNTSJUUswT651yww3Mg==}
+
   lodash@4.17.21:
     resolution: {integrity: sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==}
 
@@ -4364,6 +4504,10 @@ packages:
   minimist@1.2.8:
     resolution: {integrity: sha512-2yyAR8qBkN3YuheJanUpWC5U3bb5osDywNB8RzDVlDwDHbocAJveqqj1u8+SVD7jkWT4yvsHCpWqqWqAxb0zCA==}
 
+  minipass@7.1.2:
+    resolution: {integrity: sha512-qOOzS1cBTWYF4BH8fVePDBOO9iptMnGUEZwNc/cMWnTV2nVLZ7VoNWEPHkYczZA0pdoA7dl6e7FL659nX9S2aw==}
+    engines: {node: '>=16 || 14 >=14.17'}
+
   mipd@0.0.7:
     resolution: {integrity: sha512-aAPZPNDQ3uMTdKbuO2YmAw2TxLHO0moa4YKAyETM/DTj5FloZo+a+8tU+iv4GmW+sOxKLSRwcSFuczk+Cpt6fg==}
     peerDependencies:
@@ -4396,6 +4540,9 @@ packages:
     resolution: {integrity: sha512-FBrGau0IXmuqg4haEZRBfHNWB5mUARw6hNwPDXXGg0XzVJ50mr/9hb267lvpVMnhZ1FON3qNd4Xfcez1rbFwSg==}
     engines: {node: '>= 8.0'}
 
+  mz@2.7.0:
+    resolution: {integrity: sha512-z81GNO7nnYMEhrGh9LeymoE4+Yr0Wn5McHIZMK5cfQCl+NDX08sCZgUc9/6MHni9IWuFLm1Z3HTCXu2z9fN62Q==}
+
   named-placeholders@1.1.3:
     resolution: {integrity: sha512-eLoBxg6wE/rZkJPhU/xRX1WTpkFEwDJEN96oxFrTsqBdbT5ec295Q+CoHrL9IT0DipqKhmGcaZmwOt8OON5x1w==}
     engines: {node: '>=12.0.0'}
@@ -4448,6 +4595,10 @@ packages:
   node-addon-api@2.0.2:
     resolution: {integrity: sha512-Ntyt4AIXyaLIuMHF6IOoTakB3K+RWxwtsHNRxllEoA6vPwP9o4866g6YWDLUdnucilZhmkxiHwHr11gAENw+QA==}
 
+  node-addon-api@8.5.0:
+    resolution: {integrity: sha512-/bRZty2mXUIFY/xU5HLvveNHlswNJej+RnxBjOMkidWfwZzgTbPG1E3K5TOxRLOR+5hX7bSofy8yf1hZevMS8A==}
+    engines: {node: ^18 || ^20 || >= 21}
+
   node-fetch-native@1.6.7:
     resolution: {integrity: sha512-g9yhqoedzIUm0nTnTqAQvueMPVOuIY16bqgAJJC8XOOubYFNwz6IER9qs0Gq2Xd0+CecCKFjtdDTMA4u4xG06Q==}
 
@@ -4474,6 +4625,10 @@ packages:
     resolution: {integrity: sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==}
     engines: {node: '>=0.10.0'}
 
+  normalize-range@0.1.2:
+    resolution: {integrity: sha512-bdok/XvKII3nUpklnV6P2hxtMNrCboOjAcyBuQnWEhO665FwrSNRxU+AqpsyvO6LgGYPspN+lu5CLtw4jPRKNA==}
+    engines: {node: '>=0.10.0'}
+
   obj-multiplex@1.0.0:
     resolution: {integrity: sha512-0GNJAOsHoBHeNTvl5Vt6IWnpUEcc3uSRxzBri7EDyIcMgYvnY2JL2qdeV5zTMjWQX5OHcD5amcW2HFfDh0gjIA==}
 
@@ -4481,6 +4636,10 @@ packages:
     resolution: {integrity: sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==}
     engines: {node: '>=0.10.0'}
 
+  object-hash@3.0.0:
+    resolution: {integrity: sha512-RSn9F68PjH9HqtltsSnqYC1XXoWe9Bju5+213R98cNGttag9q9yAOTzdbsqvIa7aNm5WffBZFpWYr2aWrklWAw==}
+    engines: {node: '>= 6'}
+
   object-inspect@1.13.4:
     resolution: {integrity: sha512-W67iLl4J2EXEGTbfeHCffrjDfitvLANg0UlX3wFUUSTx92KXRFegMHUVgSqE+wvhAbi4WqjGg9czysTV2Epbew==}
     engines: {node: '>= 0.4'}
@@ -4603,6 +4762,9 @@ packages:
     resolution: {integrity: sha512-R4nPAVTAU0B9D35/Gk3uJf/7XYbQcyohSKdvAxIRSNghFl4e71hVoGnBNQz9cWaXxO2I10KTC+3jMdvvoKw6dQ==}
     engines: {node: '>=6'}
 
+  package-json-from-dist@1.0.1:
+    resolution: {integrity: sha512-UEZIS3/by4OC8vL3P2dTXRETpebLI2NiI5vIrjaD/5UtrkFX/tNbwjTSRAGC/+7CAo2pIcBaRgWmcBBHcsaCIw==}
+
   parent-module@1.0.1:
     resolution: {integrity: sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==}
     engines: {node: '>=6'}
@@ -4621,6 +4783,10 @@ packages:
   path-parse@1.0.7:
     resolution: {integrity: sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==}
 
+  path-scurry@1.11.1:
+    resolution: {integrity: sha512-Xa4Nw17FS9ApQFJ9umLiJS4orGjm7ZzwUrwamcGQuHSzDyth9boKDaycYdDcZDuqYATXw4HFXgaqWTctW/v1HA==}
+    engines: {node: '>=16 || 14 >=14.18'}
+
   picocolors@1.1.1:
     resolution: {integrity: sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==}
 
@@ -4632,6 +4798,10 @@ packages:
     resolution: {integrity: sha512-5gTmgEY/sqK6gFXLIsQNH19lWb4ebPDLA4SdLP7dsWkIXHWlG66oPuVvXSGFPppYZz8ZDZq0dYYrbHfBCVUb1Q==}
     engines: {node: '>=12'}
 
+  pify@2.3.0:
+    resolution: {integrity: sha512-udgsAY+fTnvv7kI7aaxbqwWNb0AHiB0qBO89PZKPkoTmGOgdbrHDKD+0B2X4uTfJ/FT1R09r9gTsjUjNJotuog==}
+    engines: {node: '>=0.10.0'}
+
   pify@3.0.0:
     resolution: {integrity: sha512-C3FsVNH1udSEX48gGX1xfvwTWfsYWj5U+8/uK15BGzIGrKoUpghX8hWZwa/OFnakBiiVNmBvemTJR5mcy7iPcg==}
     engines: {node: '>=4'}
@@ -4650,6 +4820,10 @@ packages:
     resolution: {integrity: sha512-dMACeu63HtRLmCG8VKdy4cShCPKaYDR4youZqoSWLxl5Gu99HUw8bw75thbPv9Nip+H+QYX8o3ZJbTdVZZ2TVg==}
     hasBin: true
 
+  pirates@4.0.7:
+    resolution: {integrity: sha512-TfySrs/5nm8fQJDcBDuUng3VOUKsd7S+zqvbOTiGXHfxX4wK31ard+hoNuvkicM/2YFzlpDgABOevKSsB4G/FA==}
+    engines: {node: '>= 6'}
+
   pngjs@5.0.0:
     resolution: {integrity: sha512-40QW5YalBNfQo5yRYmiw7Yz6TKKVr3h6970B2YE+3fQpsWcrbj1PzJgxeJ19DRQjhMbKPIuMY8rFaXc8moolVw==}
     engines: {node: '>=10.13.0'}
@@ -4694,14 +4868,55 @@ packages:
     resolution: {integrity: sha512-/+5VFTchJDoVj3bhoqi6UeymcD00DAwb1nJwamzPvHEszJ4FpF6SNNbUbOS8yI56qHzdV8eK0qEfOSiodkTdxg==}
     engines: {node: '>= 0.4'}
 
+  postcss-import@15.1.0:
+    resolution: {integrity: sha512-hpr+J05B2FVYUAXHeK1YyI267J/dDDhMU6B6civm8hSY1jYJnBXxzKDKDswzJmtLHryrjhnDjqqp/49t8FALew==}
+    engines: {node: '>=14.0.0'}
+    peerDependencies:
+      postcss: ^8.0.0
+
+  postcss-js@4.1.0:
+    resolution: {integrity: sha512-oIAOTqgIo7q2EOwbhb8UalYePMvYoIeRY2YKntdpFQXNosSu3vLrniGgmH9OKs/qAkfoj5oB3le/7mINW1LCfw==}
+    engines: {node: ^12 || ^14 || >= 16}
+    peerDependencies:
+      postcss: ^8.4.21
+
+  postcss-load-config@4.0.2:
+    resolution: {integrity: sha512-bSVhyJGL00wMVoPUzAVAnbEoWyqRxkjv64tUl427SKnPrENtq6hJwUojroMz2VB+Q1edmi4IfrAPpami5VVgMQ==}
+    engines: {node: '>= 14'}
+    peerDependencies:
+      postcss: '>=8.0.9'
+      ts-node: '>=9.0.0'
+    peerDependenciesMeta:
+      postcss:
+        optional: true
+      ts-node:
+        optional: true
+
+  postcss-nested@6.2.0:
+    resolution: {integrity: sha512-HQbt28KulC5AJzG+cZtj9kvKB93CFCdLvog1WFLf1D+xmMvPGlBstkpTEZfK5+AN9hfJocyBFCNiqyS48bpgzQ==}
+    engines: {node: '>=12.0'}
+    peerDependencies:
+      postcss: ^8.2.14
+
   postcss-selector-parser@6.0.10:
     resolution: {integrity: sha512-IQ7TZdoaqbT+LCpShg46jnZVlhWD2w6iQYAcYXfHARZ7X1t/UGhhceQDs5X0cGqKvYlHNOuv7Oa1xmb0oQuA3w==}
     engines: {node: '>=4'}
 
+  postcss-selector-parser@6.1.2:
+    resolution: {integrity: sha512-Q8qQfPiZ+THO/3ZrOrO0cJJKfpYCagtMUkXbnEfmgUjwXg6z/WBeOyS9APBBPCTSiDV+s4SwQGu8yFsiMRIudg==}
+    engines: {node: '>=4'}
+
+  postcss-value-parser@4.2.0:
+    resolution: {integrity: sha512-1NNCs6uurfkVbeXG4S8JFT9t19m45ICnif8zWLd5oPSZ50QnwMfK+H3jv408d4jw/7Bttv5axS5IiHoLaVNHeQ==}
+
   postcss@8.4.31:
     resolution: {integrity: sha512-PS08Iboia9mts/2ygV3eLpY5ghnUcfLV/EXTOW1E2qYxJKGGBUtNjN76FYHnMs36RmARn41bC0AZmn+rR0OVpQ==}
     engines: {node: ^10 || ^12 || >=14}
 
+  postcss@8.5.6:
+    resolution: {integrity: sha512-3Ybi1tAuwAP9s0r1UQ2J4n5Y0G05bJkpUIO0/bI9MhwmD70S5aTWbXGBwxHrelT+XM1k6dM0pk+SwNkpTRN7Pg==}
+    engines: {node: ^10 || ^12 || >=14}
+
   preact@10.24.2:
     resolution: {integrity: sha512-1cSoF0aCC8uaARATfrlz4VCBqE8LwZwRfLgkxJOQwAlQt6ayTmi0D9OF7nXid1POI5SZidFuG9CnlXbDfLqY/Q==}
 
@@ -4842,6 +5057,9 @@ packages:
     resolution: {integrity: sha512-tmbWg6W31tQLeB5cdIBOicJDJRR2KzXsV7uSK9iNfLWQ5bIZfxuPEHp7M8wiHyHnn0DD1i7w3Zmin0FtkrwoCQ==}
     engines: {node: '>=0.10.0'}
 
+  read-cache@1.0.0:
+    resolution: {integrity: sha512-Owdv/Ft7IjOgm/i0xvNDZ1LrRANRfew4b2prF3OWMQLxLfu3bS8FVhCsrSCMK4lR56Y9ya+AThoTpDCTxCmpRA==}
+
   readable-stream@2.3.8:
     resolution: {integrity: sha512-8p0AUk4XODgIewSi0l8Epjs+EVnWiK7NoDIEGU0HhE7+ZyY8D1IMY7odu5lRrFXGg71L15KG8QrPmum45RTtdA==}
 
@@ -5027,6 +5245,10 @@ packages:
     resolution: {integrity: sha512-ZX99e6tRweoUXqR+VBrslhda51Nh5MTQwou5tnUDgbtyM0dBgmhEDtWGP/xbKn6hqfPRHujUNwz5fy/wbbhnpw==}
     engines: {node: '>= 0.4'}
 
+  signal-exit@4.1.0:
+    resolution: {integrity: sha512-bzyZ1e88w9O1iNJbKnOlvYTrWPDl46O1bG0D3XInv+9tkPrxrN8jUUTiFlDkkmKWgn1M6CfIA13SuGqOa9Korw==}
+    engines: {node: '>=14'}
+
   simplebar-core@1.3.2:
     resolution: {integrity: sha512-qKgTTuTqapjsFGkNhCjyPhysnbZGpQqNmjk0nOYjFN5ordC/Wjvg+RbYCyMSnW60l/Z0ZS82GbNltly6PMUH1w==}
 
@@ -5118,6 +5340,10 @@ packages:
     resolution: {integrity: sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==}
     engines: {node: '>=8'}
 
+  string-width@5.1.2:
+    resolution: {integrity: sha512-HnLOCR3vjcY8beoNLtcjZ5/nxn2afmME6lhrDrebokqMap+XbeW8n9TXpPDOqdGK5qcI3oT0GKTW6wC7EMiVqA==}
+    engines: {node: '>=12'}
+
   string.prototype.includes@2.0.1:
     resolution: {integrity: sha512-o7+c9bW6zpAdJHTtujeePODAhkuicdAryFsfVKwA+wGw89wJ4GTY484WTucM9hLtDEOpOvI+aHnzqnC5lHp4Rg==}
     engines: {node: '>= 0.4'}
@@ -5154,6 +5380,10 @@ packages:
     resolution: {integrity: sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==}
     engines: {node: '>=8'}
 
+  strip-ansi@7.1.2:
+    resolution: {integrity: sha512-gmBGslpoQJtgnMAvOVqGZpEz9dyoKTCzy2nfz/n8aIFhN/jCE/rCmcxabB6jOOHV+0WNnylOxaxBQPSvcWklhA==}
+    engines: {node: '>=12'}
+
   strip-bom@3.0.0:
     resolution: {integrity: sha512-vavAMRXOgBVNF6nyEEmL3DBK19iRpDcoIwW+swQ+CbGiu7lju6t+JklA1MHweoWtadgt4ISVUsXLyDq34ddcwA==}
     engines: {node: '>=4'}
@@ -5181,6 +5411,11 @@ packages:
       babel-plugin-macros:
         optional: true
 
+  sucrase@3.35.0:
+    resolution: {integrity: sha512-8EbVDiu9iN/nESwxeSxDKe0dunta1GOlHufmSSXxMD2z2/tMZpDMpvXQGsc+ajGo8y2uYUmixaSRUc/QPoQ0GA==}
+    engines: {node: '>=16 || 14 >=14.17'}
+    hasBin: true
+
   superjson@2.2.3:
     resolution: {integrity: sha512-ay3d+LW/S6yppKoTz3Bq4mG0xrS5bFwfWEBmQfbC7lt5wmtk+Obq0TxVuA9eYRirBTQb1K3eEpBRHMQEo0WyVw==}
     engines: {node: '>=16'}
@@ -5211,12 +5446,21 @@ packages:
   tailwind-merge@2.6.0:
     resolution: {integrity: sha512-P+Vu1qXfzediirmHOC3xKGAYeZtPcV9g76X+xg2FD4tYgR71ewMA35Y3sCz3zhiN/dwefRpJX0yBcgwi1fXNQA==}
 
-  tailwindcss@4.1.16:
-    resolution: {integrity: sha512-pONL5awpaQX4LN5eiv7moSiSPd/DLDzKVRJz8Q9PgzmAdd1R4307GQS2ZpfiN7ZmekdQrfhZZiSE5jkLR4WNaA==}
+  tailwindcss@3.4.17:
+    resolution: {integrity: sha512-w33E2aCvSDP0tW9RZuNXadXlkHXqFzSkQew/aIa2i/Sj8fThxwovwlXHSPXTbAHwEIhBFXAedUhP2tueAKP8Og==}
+    engines: {node: '>=14.0.0'}
+    hasBin: true
 
   text-encoding-utf-8@1.0.2:
     resolution: {integrity: sha512-8bw4MY9WjdsD2aMtO0OzOCY3pXGYNx2d2FfHRVUKkiCPDWjKuOlhLVASS+pD7VkLTVjW268LYJHwsnPFlBpbAg==}
 
+  thenify-all@1.6.0:
+    resolution: {integrity: sha512-RNxQH/qI8/t3thXJDwcstUO4zeqo64+Uy/+sNVRBx4Xn2OX+OZ9oP+iJnNFqplFra2ZUVeKCSa2oVWi3T4uVmA==}
+    engines: {node: '>=0.8'}
+
+  thenify@3.3.1:
+    resolution: {integrity: sha512-RVZSIV5IG10Hk3enotrhvz0T9em6cyHBLkH/YAZuKqd8hRkKhSfCGIcP2KUY0EPxndzANBmNllzWPwak+bheSw==}
+
   thread-stream@0.15.2:
     resolution: {integrity: sha512-UkEhKIg2pD+fjkHQKyJO3yoIvAP3N6RlNFt2dUhcS1FGvCD1cQa1M/PGknCLFIyZdtJOWQjejp7bdNqmN7zwdA==}
 
@@ -5264,6 +5508,9 @@ packages:
     peerDependencies:
       typescript: '>=4.8.4'
 
+  ts-interface-checker@0.1.13:
+    resolution: {integrity: sha512-Y/arvbn+rrz3JCKl9C4kVNfTfSm2/mEp5FSz5EsZSANGPSlQrpRI5M4PKF+mJnE52jOO90PnPSc3Ur3bTQw0gA==}
+
   tsconfig-paths@3.15.0:
     resolution: {integrity: sha512-2Ac2RgzDe/cn48GvOe3M+o82pEFewD3UPbyoUHHdKasHwJKjds4fLXWf/Ux5kATBKN20oaFGu+jbElp1pos0mg==}
 
@@ -5610,6 +5857,10 @@ packages:
     resolution: {integrity: sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==}
     engines: {node: '>=10'}
 
+  wrap-ansi@8.1.0:
+    resolution: {integrity: sha512-si7QWI6zUMq56bESFvagtmzMdGOtoxfR+Sez11Mobfc7tm+VkUckk9bW2UeffTGVUbOksxmSw0AA2gs8g71NCQ==}
+    engines: {node: '>=12'}
+
   wrappy@1.0.2:
     resolution: {integrity: sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==}
 
@@ -5691,6 +5942,11 @@ packages:
   yallist@3.1.1:
     resolution: {integrity: sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g==}
 
+  yaml@2.8.1:
+    resolution: {integrity: sha512-lcYcMxX2PO9XMGvAJkJ3OsNMw+/7FKes7/hgerGUYWIoWu5j/+YQqcZr5JnPZWzOsEBgMbSbiSTn/dv/69Mkpw==}
+    engines: {node: '>= 14.6'}
+    hasBin: true
+
   yargs-parser@18.1.3:
     resolution: {integrity: sha512-o50j0JeToy/4K6OZcaQmW6lyXXKhq7csREXcDwk2omFPJEwUNOVtJKvmDr9EI1fAJZUyZcRF7kxGBWmRXudrCQ==}
     engines: {node: '>=6'}
@@ -5788,6 +6044,8 @@ snapshots:
 
   '@adraffy/ens-normalize@1.11.1': {}
 
+  '@alloc/quick-lru@5.2.0': {}
+
   '@babel/code-frame@7.27.1':
     dependencies:
       '@babel/helper-validator-identifier': 7.28.5
@@ -6127,9 +6385,9 @@ snapshots:
   '@esbuild/win32-x64@0.19.12':
     optional: true
 
-  '@eslint-community/eslint-utils@4.9.0(eslint@9.38.0)':
+  '@eslint-community/eslint-utils@4.9.0(eslint@9.38.0(jiti@1.21.7))':
     dependencies:
-      eslint: 9.38.0
+      eslint: 9.38.0(jiti@1.21.7)
       eslint-visitor-keys: 3.4.3
 
   '@eslint-community/regexpp@4.12.2': {}
@@ -6607,6 +6865,15 @@ snapshots:
 
   '@ioredis/commands@1.4.0': {}
 
+  '@isaacs/cliui@8.0.2':
+    dependencies:
+      string-width: 5.1.2
+      string-width-cjs: string-width@4.2.3
+      strip-ansi: 7.1.2
+      strip-ansi-cjs: strip-ansi@6.0.1
+      wrap-ansi: 8.1.0
+      wrap-ansi-cjs: wrap-ansi@7.0.0
+
   '@jridgewell/gen-mapping@0.3.13':
     dependencies:
       '@jridgewell/sourcemap-codec': 1.5.5
@@ -6798,7 +7065,7 @@ snapshots:
       '@noble/hashes': 1.8.0
       '@scure/base': 1.2.6
       '@types/debug': 4.1.12
-      debug: 4.3.4
+      debug: 4.4.3(supports-color@8.1.1)
       pony-cause: 2.1.11
       semver: 7.7.3
       uuid: 9.0.1
@@ -6812,7 +7079,7 @@ snapshots:
       '@noble/hashes': 1.8.0
       '@scure/base': 1.2.6
       '@types/debug': 4.1.12
-      debug: 4.3.4
+      debug: 4.4.3(supports-color@8.1.1)
       pony-cause: 2.1.11
       semver: 7.7.3
       uuid: 9.0.1
@@ -7132,6 +7399,9 @@ snapshots:
 
   '@petamoriken/float16@3.9.3': {}
 
+  '@pkgjs/parseargs@0.11.0':
+    optional: true
+
   '@radix-ui/number@1.1.1': {}
 
   '@radix-ui/primitive@1.1.3': {}
@@ -8003,8 +8273,8 @@ snapshots:
 
   '@scure/bip32@1.6.2':
     dependencies:
-      '@noble/curves': 1.8.1
-      '@noble/hashes': 1.7.1
+      '@noble/curves': 1.8.2
+      '@noble/hashes': 1.7.2
       '@scure/base': 1.2.6
 
   '@scure/bip32@1.7.0':
@@ -8025,7 +8295,7 @@ snapshots:
 
   '@scure/bip39@1.5.4':
     dependencies:
-      '@noble/hashes': 1.7.1
+      '@noble/hashes': 1.7.2
       '@scure/base': 1.2.6
 
   '@scure/bip39@1.6.0':
@@ -8233,10 +8503,10 @@ snapshots:
     dependencies:
       tslib: 2.8.1
 
-  '@tailwindcss/typography@0.5.19(tailwindcss@4.1.16)':
+  '@tailwindcss/typography@0.5.19(tailwindcss@3.4.17)':
     dependencies:
       postcss-selector-parser: 6.0.10
-      tailwindcss: 4.1.16
+      tailwindcss: 3.4.17
 
   '@tanstack/query-core@5.90.5': {}
 
@@ -8280,6 +8550,10 @@ snapshots:
       tslib: 2.8.1
     optional: true
 
+  '@types/bcrypt@6.0.0':
+    dependencies:
+      '@types/node': 22.18.12
+
   '@types/connect@3.4.38':
     dependencies:
       '@types/node': 22.18.12
@@ -8302,6 +8576,11 @@ snapshots:
 
   '@types/json5@0.0.29': {}
 
+  '@types/jsonwebtoken@9.0.10':
+    dependencies:
+      '@types/ms': 2.1.0
+      '@types/node': 22.18.12
+
   '@types/lodash@4.17.20': {}
 
   '@types/mdast@4.0.4':
@@ -8340,15 +8619,15 @@ snapshots:
     dependencies:
       '@types/node': 22.18.12
 
-  '@typescript-eslint/eslint-plugin@8.46.2(@typescript-eslint/parser@8.46.2(eslint@9.38.0)(typescript@5.9.3))(eslint@9.38.0)(typescript@5.9.3)':
+  '@typescript-eslint/eslint-plugin@8.46.2(@typescript-eslint/parser@8.46.2(eslint@9.38.0(jiti@1.21.7))(typescript@5.9.3))(eslint@9.38.0(jiti@1.21.7))(typescript@5.9.3)':
     dependencies:
       '@eslint-community/regexpp': 4.12.2
-      '@typescript-eslint/parser': 8.46.2(eslint@9.38.0)(typescript@5.9.3)
+      '@typescript-eslint/parser': 8.46.2(eslint@9.38.0(jiti@1.21.7))(typescript@5.9.3)
       '@typescript-eslint/scope-manager': 8.46.2
-      '@typescript-eslint/type-utils': 8.46.2(eslint@9.38.0)(typescript@5.9.3)
-      '@typescript-eslint/utils': 8.46.2(eslint@9.38.0)(typescript@5.9.3)
+      '@typescript-eslint/type-utils': 8.46.2(eslint@9.38.0(jiti@1.21.7))(typescript@5.9.3)
+      '@typescript-eslint/utils': 8.46.2(eslint@9.38.0(jiti@1.21.7))(typescript@5.9.3)
       '@typescript-eslint/visitor-keys': 8.46.2
-      eslint: 9.38.0
+      eslint: 9.38.0(jiti@1.21.7)
       graphemer: 1.4.0
       ignore: 7.0.5
       natural-compare: 1.4.0
@@ -8357,14 +8636,14 @@ snapshots:
     transitivePeerDependencies:
       - supports-color
 
-  '@typescript-eslint/parser@8.46.2(eslint@9.38.0)(typescript@5.9.3)':
+  '@typescript-eslint/parser@8.46.2(eslint@9.38.0(jiti@1.21.7))(typescript@5.9.3)':
     dependencies:
       '@typescript-eslint/scope-manager': 8.46.2
       '@typescript-eslint/types': 8.46.2
       '@typescript-eslint/typescript-estree': 8.46.2(typescript@5.9.3)
       '@typescript-eslint/visitor-keys': 8.46.2
       debug: 4.4.3(supports-color@8.1.1)
-      eslint: 9.38.0
+      eslint: 9.38.0(jiti@1.21.7)
       typescript: 5.9.3
     transitivePeerDependencies:
       - supports-color
@@ -8387,13 +8666,13 @@ snapshots:
     dependencies:
       typescript: 5.9.3
 
-  '@typescript-eslint/type-utils@8.46.2(eslint@9.38.0)(typescript@5.9.3)':
+  '@typescript-eslint/type-utils@8.46.2(eslint@9.38.0(jiti@1.21.7))(typescript@5.9.3)':
     dependencies:
       '@typescript-eslint/types': 8.46.2
       '@typescript-eslint/typescript-estree': 8.46.2(typescript@5.9.3)
-      '@typescript-eslint/utils': 8.46.2(eslint@9.38.0)(typescript@5.9.3)
+      '@typescript-eslint/utils': 8.46.2(eslint@9.38.0(jiti@1.21.7))(typescript@5.9.3)
       debug: 4.4.3(supports-color@8.1.1)
-      eslint: 9.38.0
+      eslint: 9.38.0(jiti@1.21.7)
       ts-api-utils: 2.1.0(typescript@5.9.3)
       typescript: 5.9.3
     transitivePeerDependencies:
@@ -8417,13 +8696,13 @@ snapshots:
     transitivePeerDependencies:
       - supports-color
 
-  '@typescript-eslint/utils@8.46.2(eslint@9.38.0)(typescript@5.9.3)':
+  '@typescript-eslint/utils@8.46.2(eslint@9.38.0(jiti@1.21.7))(typescript@5.9.3)':
     dependencies:
-      '@eslint-community/eslint-utils': 4.9.0(eslint@9.38.0)
+      '@eslint-community/eslint-utils': 4.9.0(eslint@9.38.0(jiti@1.21.7))
       '@typescript-eslint/scope-manager': 8.46.2
       '@typescript-eslint/types': 8.46.2
       '@typescript-eslint/typescript-estree': 8.46.2(typescript@5.9.3)
-      eslint: 9.38.0
+      eslint: 9.38.0(jiti@1.21.7)
       typescript: 5.9.3
     transitivePeerDependencies:
       - supports-color
@@ -9246,15 +9525,23 @@ snapshots:
 
   ansi-regex@5.0.1: {}
 
+  ansi-regex@6.2.2: {}
+
   ansi-styles@4.3.0:
     dependencies:
       color-convert: 2.0.1
 
+  ansi-styles@6.2.3: {}
+
+  any-promise@1.3.0: {}
+
   anymatch@3.1.3:
     dependencies:
       normalize-path: 3.0.0
       picomatch: 2.3.1
 
+  arg@5.0.2: {}
+
   argparse@2.0.1: {}
 
   aria-hidden@1.2.6:
@@ -9342,6 +9629,16 @@ snapshots:
 
   atomic-sleep@1.0.0: {}
 
+  autoprefixer@10.4.21(postcss@8.5.6):
+    dependencies:
+      browserslist: 4.27.0
+      caniuse-lite: 1.0.30001751
+      fraction.js: 4.3.7
+      normalize-range: 0.1.2
+      picocolors: 1.1.1
+      postcss: 8.5.6
+      postcss-value-parser: 4.2.0
+
   available-typed-arrays@1.0.7:
     dependencies:
       possible-typed-array-names: 1.1.0
@@ -9376,6 +9673,11 @@ snapshots:
 
   baseline-browser-mapping@2.8.20: {}
 
+  bcrypt@6.0.0:
+    dependencies:
+      node-addon-api: 8.5.0
+      node-gyp-build: 4.8.4
+
   bech32@1.1.4: {}
 
   before-after-hook@4.0.0: {}
@@ -9452,6 +9754,8 @@ snapshots:
     dependencies:
       base-x: 5.0.1
 
+  buffer-equal-constant-time@1.0.1: {}
+
   buffer-from@1.1.2: {}
 
   buffer@6.0.3:
@@ -9484,6 +9788,8 @@ snapshots:
 
   callsites@3.1.0: {}
 
+  camelcase-css@2.0.1: {}
+
   camelcase@5.3.1: {}
 
   camelcase@6.3.0: {}
@@ -9582,6 +9888,8 @@ snapshots:
 
   commander@2.20.3: {}
 
+  commander@4.1.1: {}
+
   commander@8.3.0: {}
 
   concat-map@0.0.1: {}
@@ -9741,10 +10049,14 @@ snapshots:
     dependencies:
       dequal: 2.0.3
 
+  didyoumean@1.2.2: {}
+
   diff@5.2.0: {}
 
   dijkstrajs@1.0.3: {}
 
+  dlv@1.1.3: {}
+
   doctrine@2.1.0:
     dependencies:
       esutils: 2.0.3
@@ -9779,6 +10091,12 @@ snapshots:
       readable-stream: 3.6.2
       stream-shift: 1.0.3
 
+  eastasianwidth@0.2.0: {}
+
+  ecdsa-sig-formatter@1.0.11:
+    dependencies:
+      safe-buffer: 5.2.1
+
   eciesjs@0.4.16:
     dependencies:
       '@ecies/ciphers': 0.2.4(@noble/ciphers@1.3.0)
@@ -10002,18 +10320,18 @@ snapshots:
 
   escape-string-regexp@4.0.0: {}
 
-  eslint-config-next@16.0.0(@typescript-eslint/parser@8.46.2(eslint@9.38.0)(typescript@5.9.3))(eslint@9.38.0)(typescript@5.9.3):
+  eslint-config-next@16.0.0(@typescript-eslint/parser@8.46.2(eslint@9.38.0(jiti@1.21.7))(typescript@5.9.3))(eslint@9.38.0(jiti@1.21.7))(typescript@5.9.3):
     dependencies:
       '@next/eslint-plugin-next': 16.0.0
-      eslint: 9.38.0
+      eslint: 9.38.0(jiti@1.21.7)
       eslint-import-resolver-node: 0.3.9
-      eslint-import-resolver-typescript: 3.10.1(eslint-plugin-import@2.32.0(@typescript-eslint/parser@8.46.2(eslint@9.38.0)(typescript@5.9.3))(eslint@9.38.0))(eslint@9.38.0)
-      eslint-plugin-import: 2.32.0(@typescript-eslint/parser@8.46.2(eslint@9.38.0)(typescript@5.9.3))(eslint-import-resolver-typescript@3.10.1(eslint-plugin-import@2.32.0(@typescript-eslint/parser@8.46.2(eslint@9.38.0)(typescript@5.9.3))(eslint@9.38.0))(eslint@9.38.0))(eslint@9.38.0)
-      eslint-plugin-jsx-a11y: 6.10.2(eslint@9.38.0)
-      eslint-plugin-react: 7.37.5(eslint@9.38.0)
-      eslint-plugin-react-hooks: 7.0.1(eslint@9.38.0)
+      eslint-import-resolver-typescript: 3.10.1(eslint-plugin-import@2.32.0)(eslint@9.38.0(jiti@1.21.7))
+      eslint-plugin-import: 2.32.0(@typescript-eslint/parser@8.46.2(eslint@9.38.0(jiti@1.21.7))(typescript@5.9.3))(eslint-import-resolver-typescript@3.10.1)(eslint@9.38.0(jiti@1.21.7))
+      eslint-plugin-jsx-a11y: 6.10.2(eslint@9.38.0(jiti@1.21.7))
+      eslint-plugin-react: 7.37.5(eslint@9.38.0(jiti@1.21.7))
+      eslint-plugin-react-hooks: 7.0.1(eslint@9.38.0(jiti@1.21.7))
       globals: 16.4.0
-      typescript-eslint: 8.46.2(eslint@9.38.0)(typescript@5.9.3)
+      typescript-eslint: 8.46.2(eslint@9.38.0(jiti@1.21.7))(typescript@5.9.3)
     optionalDependencies:
       typescript: 5.9.3
     transitivePeerDependencies:
@@ -10030,33 +10348,33 @@ snapshots:
     transitivePeerDependencies:
       - supports-color
 
-  eslint-import-resolver-typescript@3.10.1(eslint-plugin-import@2.32.0(@typescript-eslint/parser@8.46.2(eslint@9.38.0)(typescript@5.9.3))(eslint@9.38.0))(eslint@9.38.0):
+  eslint-import-resolver-typescript@3.10.1(eslint-plugin-import@2.32.0)(eslint@9.38.0(jiti@1.21.7)):
     dependencies:
       '@nolyfill/is-core-module': 1.0.39
       debug: 4.4.3(supports-color@8.1.1)
-      eslint: 9.38.0
+      eslint: 9.38.0(jiti@1.21.7)
       get-tsconfig: 4.13.0
       is-bun-module: 2.0.0
       stable-hash: 0.0.5
       tinyglobby: 0.2.15
       unrs-resolver: 1.11.1
     optionalDependencies:
-      eslint-plugin-import: 2.32.0(@typescript-eslint/parser@8.46.2(eslint@9.38.0)(typescript@5.9.3))(eslint-import-resolver-typescript@3.10.1(eslint-plugin-import@2.32.0(@typescript-eslint/parser@8.46.2(eslint@9.38.0)(typescript@5.9.3))(eslint@9.38.0))(eslint@9.38.0))(eslint@9.38.0)
+      eslint-plugin-import: 2.32.0(@typescript-eslint/parser@8.46.2(eslint@9.38.0(jiti@1.21.7))(typescript@5.9.3))(eslint-import-resolver-typescript@3.10.1)(eslint@9.38.0(jiti@1.21.7))
     transitivePeerDependencies:
       - supports-color
 
-  eslint-module-utils@2.12.1(@typescript-eslint/parser@8.46.2(eslint@9.38.0)(typescript@5.9.3))(eslint-import-resolver-node@0.3.9)(eslint-import-resolver-typescript@3.10.1(eslint-plugin-import@2.32.0(@typescript-eslint/parser@8.46.2(eslint@9.38.0)(typescript@5.9.3))(eslint@9.38.0))(eslint@9.38.0))(eslint@9.38.0):
+  eslint-module-utils@2.12.1(@typescript-eslint/parser@8.46.2(eslint@9.38.0(jiti@1.21.7))(typescript@5.9.3))(eslint-import-resolver-node@0.3.9)(eslint-import-resolver-typescript@3.10.1)(eslint@9.38.0(jiti@1.21.7)):
     dependencies:
       debug: 3.2.7
     optionalDependencies:
-      '@typescript-eslint/parser': 8.46.2(eslint@9.38.0)(typescript@5.9.3)
-      eslint: 9.38.0
+      '@typescript-eslint/parser': 8.46.2(eslint@9.38.0(jiti@1.21.7))(typescript@5.9.3)
+      eslint: 9.38.0(jiti@1.21.7)
       eslint-import-resolver-node: 0.3.9
-      eslint-import-resolver-typescript: 3.10.1(eslint-plugin-import@2.32.0(@typescript-eslint/parser@8.46.2(eslint@9.38.0)(typescript@5.9.3))(eslint@9.38.0))(eslint@9.38.0)
+      eslint-import-resolver-typescript: 3.10.1(eslint-plugin-import@2.32.0)(eslint@9.38.0(jiti@1.21.7))
     transitivePeerDependencies:
       - supports-color
 
-  eslint-plugin-import@2.32.0(@typescript-eslint/parser@8.46.2(eslint@9.38.0)(typescript@5.9.3))(eslint-import-resolver-typescript@3.10.1(eslint-plugin-import@2.32.0(@typescript-eslint/parser@8.46.2(eslint@9.38.0)(typescript@5.9.3))(eslint@9.38.0))(eslint@9.38.0))(eslint@9.38.0):
+  eslint-plugin-import@2.32.0(@typescript-eslint/parser@8.46.2(eslint@9.38.0(jiti@1.21.7))(typescript@5.9.3))(eslint-import-resolver-typescript@3.10.1)(eslint@9.38.0(jiti@1.21.7)):
     dependencies:
       '@rtsao/scc': 1.1.0
       array-includes: 3.1.9
@@ -10065,9 +10383,9 @@ snapshots:
       array.prototype.flatmap: 1.3.3
       debug: 3.2.7
       doctrine: 2.1.0
-      eslint: 9.38.0
+      eslint: 9.38.0(jiti@1.21.7)
       eslint-import-resolver-node: 0.3.9
-      eslint-module-utils: 2.12.1(@typescript-eslint/parser@8.46.2(eslint@9.38.0)(typescript@5.9.3))(eslint-import-resolver-node@0.3.9)(eslint-import-resolver-typescript@3.10.1(eslint-plugin-import@2.32.0(@typescript-eslint/parser@8.46.2(eslint@9.38.0)(typescript@5.9.3))(eslint@9.38.0))(eslint@9.38.0))(eslint@9.38.0)
+      eslint-module-utils: 2.12.1(@typescript-eslint/parser@8.46.2(eslint@9.38.0(jiti@1.21.7))(typescript@5.9.3))(eslint-import-resolver-node@0.3.9)(eslint-import-resolver-typescript@3.10.1)(eslint@9.38.0(jiti@1.21.7))
       hasown: 2.0.2
       is-core-module: 2.16.1
       is-glob: 4.0.3
@@ -10079,13 +10397,13 @@ snapshots:
       string.prototype.trimend: 1.0.9
       tsconfig-paths: 3.15.0
     optionalDependencies:
-      '@typescript-eslint/parser': 8.46.2(eslint@9.38.0)(typescript@5.9.3)
+      '@typescript-eslint/parser': 8.46.2(eslint@9.38.0(jiti@1.21.7))(typescript@5.9.3)
     transitivePeerDependencies:
       - eslint-import-resolver-typescript
       - eslint-import-resolver-webpack
       - supports-color
 
-  eslint-plugin-jsx-a11y@6.10.2(eslint@9.38.0):
+  eslint-plugin-jsx-a11y@6.10.2(eslint@9.38.0(jiti@1.21.7)):
     dependencies:
       aria-query: 5.3.2
       array-includes: 3.1.9
@@ -10095,7 +10413,7 @@ snapshots:
       axobject-query: 4.1.0
       damerau-levenshtein: 1.0.8
       emoji-regex: 9.2.2
-      eslint: 9.38.0
+      eslint: 9.38.0(jiti@1.21.7)
       hasown: 2.0.2
       jsx-ast-utils: 3.3.5
       language-tags: 1.0.9
@@ -10104,18 +10422,18 @@ snapshots:
       safe-regex-test: 1.1.0
       string.prototype.includes: 2.0.1
 
-  eslint-plugin-react-hooks@7.0.1(eslint@9.38.0):
+  eslint-plugin-react-hooks@7.0.1(eslint@9.38.0(jiti@1.21.7)):
     dependencies:
       '@babel/core': 7.28.5
       '@babel/parser': 7.28.5
-      eslint: 9.38.0
+      eslint: 9.38.0(jiti@1.21.7)
       hermes-parser: 0.25.1
       zod: 4.1.12
       zod-validation-error: 4.0.2(zod@4.1.12)
     transitivePeerDependencies:
       - supports-color
 
-  eslint-plugin-react@7.37.5(eslint@9.38.0):
+  eslint-plugin-react@7.37.5(eslint@9.38.0(jiti@1.21.7)):
     dependencies:
       array-includes: 3.1.9
       array.prototype.findlast: 1.2.5
@@ -10123,7 +10441,7 @@ snapshots:
       array.prototype.tosorted: 1.1.4
       doctrine: 2.1.0
       es-iterator-helpers: 1.2.1
-      eslint: 9.38.0
+      eslint: 9.38.0(jiti@1.21.7)
       estraverse: 5.3.0
       hasown: 2.0.2
       jsx-ast-utils: 3.3.5
@@ -10146,9 +10464,9 @@ snapshots:
 
   eslint-visitor-keys@4.2.1: {}
 
-  eslint@9.38.0:
+  eslint@9.38.0(jiti@1.21.7):
     dependencies:
-      '@eslint-community/eslint-utils': 4.9.0(eslint@9.38.0)
+      '@eslint-community/eslint-utils': 4.9.0(eslint@9.38.0(jiti@1.21.7))
       '@eslint-community/regexpp': 4.12.2
       '@eslint/config-array': 0.21.1
       '@eslint/config-helpers': 0.4.1
@@ -10182,6 +10500,8 @@ snapshots:
       minimatch: 3.1.2
       natural-compare: 1.4.0
       optionator: 0.9.4
+    optionalDependencies:
+      jiti: 1.21.7
     transitivePeerDependencies:
       - supports-color
 
@@ -10376,6 +10696,11 @@ snapshots:
     dependencies:
       is-callable: 1.2.7
 
+  foreground-child@3.3.1:
+    dependencies:
+      cross-spawn: 7.0.6
+      signal-exit: 4.1.0
+
   form-data@4.0.4:
     dependencies:
       asynckit: 0.4.0
@@ -10386,6 +10711,8 @@ snapshots:
 
   fp-ts@1.19.3: {}
 
+  fraction.js@4.3.7: {}
+
   fs-extra@7.0.1:
     dependencies:
       graceful-fs: 4.2.11
@@ -10469,6 +10796,15 @@ snapshots:
     dependencies:
       is-glob: 4.0.3
 
+  glob@10.4.5:
+    dependencies:
+      foreground-child: 3.3.1
+      jackspeak: 3.4.3
+      minimatch: 9.0.5
+      minipass: 7.1.2
+      package-json-from-dist: 1.0.1
+      path-scurry: 1.11.1
+
   glob@8.1.0:
     dependencies:
       fs.realpath: 1.0.0
@@ -10897,6 +11233,12 @@ snapshots:
       has-symbols: 1.1.0
       set-function-name: 2.0.2
 
+  jackspeak@3.4.3:
+    dependencies:
+      '@isaacs/cliui': 8.0.2
+    optionalDependencies:
+      '@pkgjs/parseargs': 0.11.0
+
   jayson@4.2.0(bufferutil@4.0.9)(utf-8-validate@5.0.10):
     dependencies:
       '@types/connect': 3.4.38
@@ -10915,6 +11257,8 @@ snapshots:
       - bufferutil
       - utf-8-validate
 
+  jiti@1.21.7: {}
+
   jose@6.1.0: {}
 
   js-sha3@0.8.0: {}
@@ -10958,6 +11302,19 @@ snapshots:
     optionalDependencies:
       graceful-fs: 4.2.11
 
+  jsonwebtoken@9.0.2:
+    dependencies:
+      jws: 3.2.2
+      lodash.includes: 4.3.0
+      lodash.isboolean: 3.0.3
+      lodash.isinteger: 4.0.4
+      lodash.isnumber: 3.0.3
+      lodash.isplainobject: 4.0.6
+      lodash.isstring: 4.0.1
+      lodash.once: 4.1.1
+      ms: 2.1.3
+      semver: 7.7.3
+
   jsx-ast-utils@3.3.5:
     dependencies:
       array-includes: 3.1.9
@@ -10965,6 +11322,17 @@ snapshots:
       object.assign: 4.1.7
       object.values: 1.2.1
 
+  jwa@1.4.2:
+    dependencies:
+      buffer-equal-constant-time: 1.0.1
+      ecdsa-sig-formatter: 1.0.11
+      safe-buffer: 5.2.1
+
+  jws@3.2.2:
+    dependencies:
+      jwa: 1.4.2
+      safe-buffer: 5.2.1
+
   keccak@3.0.4:
     dependencies:
       node-addon-api: 2.0.2
@@ -10988,6 +11356,10 @@ snapshots:
       prelude-ls: 1.2.1
       type-check: 0.4.0
 
+  lilconfig@3.1.3: {}
+
+  lines-and-columns@1.2.4: {}
+
   lit-element@4.2.1:
     dependencies:
       '@lit-labs/ssr-dom-shim': 1.4.0
@@ -11016,10 +11388,24 @@ snapshots:
 
   lodash.defaults@4.2.0: {}
 
+  lodash.includes@4.3.0: {}
+
   lodash.isarguments@3.1.0: {}
 
+  lodash.isboolean@3.0.3: {}
+
+  lodash.isinteger@4.0.4: {}
+
+  lodash.isnumber@3.0.3: {}
+
+  lodash.isplainobject@4.0.6: {}
+
+  lodash.isstring@4.0.1: {}
+
   lodash.merge@4.6.2: {}
 
+  lodash.once@4.1.1: {}
+
   lodash@4.17.21: {}
 
   log-symbols@4.1.0:
@@ -11328,6 +11714,8 @@ snapshots:
 
   minimist@1.2.8: {}
 
+  minipass@7.1.2: {}
+
   mipd@0.0.7(typescript@5.9.3):
     optionalDependencies:
       typescript: 5.9.3
@@ -11379,6 +11767,12 @@ snapshots:
       seq-queue: 0.0.5
       sqlstring: 2.3.3
 
+  mz@2.7.0:
+    dependencies:
+      any-promise: 1.3.0
+      object-assign: 4.1.1
+      thenify-all: 1.6.0
+
   named-placeholders@1.1.3:
     dependencies:
       lru-cache: 7.18.3
@@ -11421,6 +11815,8 @@ snapshots:
 
   node-addon-api@2.0.2: {}
 
+  node-addon-api@8.5.0: {}
+
   node-fetch-native@1.6.7: {}
 
   node-fetch@2.7.0:
@@ -11435,6 +11831,8 @@ snapshots:
 
   normalize-path@3.0.0: {}
 
+  normalize-range@0.1.2: {}
+
   obj-multiplex@1.0.0:
     dependencies:
       end-of-stream: 1.4.5
@@ -11443,6 +11841,8 @@ snapshots:
 
   object-assign@4.1.1: {}
 
+  object-hash@3.0.0: {}
+
   object-inspect@1.13.4: {}
 
   object-keys@1.1.1: {}
@@ -11523,10 +11923,10 @@ snapshots:
   ox@0.6.7(typescript@5.9.3)(zod@4.1.12):
     dependencies:
       '@adraffy/ens-normalize': 1.11.1
-      '@noble/curves': 1.8.1
-      '@noble/hashes': 1.7.1
-      '@scure/bip32': 1.6.2
-      '@scure/bip39': 1.5.4
+      '@noble/curves': 1.9.7
+      '@noble/hashes': 1.8.0
+      '@scure/bip32': 1.7.0
+      '@scure/bip39': 1.6.0
       abitype: 1.0.8(typescript@5.9.3)(zod@4.1.12)
       eventemitter3: 5.0.1
     optionalDependencies:
@@ -11630,6 +12030,8 @@ snapshots:
 
   p-try@2.2.0: {}
 
+  package-json-from-dist@1.0.1: {}
+
   parent-module@1.0.1:
     dependencies:
       callsites: 3.1.0
@@ -11650,12 +12052,19 @@ snapshots:
 
   path-parse@1.0.7: {}
 
+  path-scurry@1.11.1:
+    dependencies:
+      lru-cache: 10.4.3
+      minipass: 7.1.2
+
   picocolors@1.1.1: {}
 
   picomatch@2.3.1: {}
 
   picomatch@4.0.3: {}
 
+  pify@2.3.0: {}
+
   pify@3.0.0: {}
 
   pify@5.0.0: {}
@@ -11681,6 +12090,8 @@ snapshots:
       sonic-boom: 2.8.0
       thread-stream: 0.15.2
 
+  pirates@4.0.7: {}
+
   pngjs@5.0.0: {}
 
   pony-cause@2.1.11: {}
@@ -11707,17 +12118,54 @@ snapshots:
 
   possible-typed-array-names@1.1.0: {}
 
+  postcss-import@15.1.0(postcss@8.5.6):
+    dependencies:
+      postcss: 8.5.6
+      postcss-value-parser: 4.2.0
+      read-cache: 1.0.0
+      resolve: 1.22.11
+
+  postcss-js@4.1.0(postcss@8.5.6):
+    dependencies:
+      camelcase-css: 2.0.1
+      postcss: 8.5.6
+
+  postcss-load-config@4.0.2(postcss@8.5.6):
+    dependencies:
+      lilconfig: 3.1.3
+      yaml: 2.8.1
+    optionalDependencies:
+      postcss: 8.5.6
+
+  postcss-nested@6.2.0(postcss@8.5.6):
+    dependencies:
+      postcss: 8.5.6
+      postcss-selector-parser: 6.1.2
+
   postcss-selector-parser@6.0.10:
     dependencies:
       cssesc: 3.0.0
       util-deprecate: 1.0.2
 
+  postcss-selector-parser@6.1.2:
+    dependencies:
+      cssesc: 3.0.0
+      util-deprecate: 1.0.2
+
+  postcss-value-parser@4.2.0: {}
+
   postcss@8.4.31:
     dependencies:
       nanoid: 3.3.11
       picocolors: 1.1.1
       source-map-js: 1.2.1
 
+  postcss@8.5.6:
+    dependencies:
+      nanoid: 3.3.11
+      picocolors: 1.1.1
+      source-map-js: 1.2.1
+
   preact@10.24.2: {}
 
   preact@10.27.2: {}
@@ -11863,6 +12311,10 @@ snapshots:
 
   react@19.2.0: {}
 
+  read-cache@1.0.0:
+    dependencies:
+      pify: 2.3.0
+
   readable-stream@2.3.8:
     dependencies:
       core-util-is: 1.0.3
@@ -12116,6 +12568,8 @@ snapshots:
       side-channel-map: 1.0.1
       side-channel-weakmap: 1.0.2
 
+  signal-exit@4.1.0: {}
+
   simplebar-core@1.3.2:
     dependencies:
       lodash: 4.17.21
@@ -12213,6 +12667,12 @@ snapshots:
       is-fullwidth-code-point: 3.0.0
       strip-ansi: 6.0.1
 
+  string-width@5.1.2:
+    dependencies:
+      eastasianwidth: 0.2.0
+      emoji-regex: 9.2.2
+      strip-ansi: 7.1.2
+
   string.prototype.includes@2.0.1:
     dependencies:
       call-bind: 1.0.8
@@ -12280,6 +12740,10 @@ snapshots:
     dependencies:
       ansi-regex: 5.0.1
 
+  strip-ansi@7.1.2:
+    dependencies:
+      ansi-regex: 6.2.2
+
   strip-bom@3.0.0: {}
 
   strip-json-comments@3.1.1: {}
@@ -12299,6 +12763,16 @@ snapshots:
     optionalDependencies:
       '@babel/core': 7.28.5
 
+  sucrase@3.35.0:
+    dependencies:
+      '@jridgewell/gen-mapping': 0.3.13
+      commander: 4.1.1
+      glob: 10.4.5
+      lines-and-columns: 1.2.4
+      mz: 2.7.0
+      pirates: 4.0.7
+      ts-interface-checker: 0.1.13
+
   superjson@2.2.3:
     dependencies:
       copy-anything: 4.0.5
@@ -12321,10 +12795,43 @@ snapshots:
 
   tailwind-merge@2.6.0: {}
 
-  tailwindcss@4.1.16: {}
+  tailwindcss@3.4.17:
+    dependencies:
+      '@alloc/quick-lru': 5.2.0
+      arg: 5.0.2
+      chokidar: 3.6.0
+      didyoumean: 1.2.2
+      dlv: 1.1.3
+      fast-glob: 3.3.3
+      glob-parent: 6.0.2
+      is-glob: 4.0.3
+      jiti: 1.21.7
+      lilconfig: 3.1.3
+      micromatch: 4.0.8
+      normalize-path: 3.0.0
+      object-hash: 3.0.0
+      picocolors: 1.1.1
+      postcss: 8.5.6
+      postcss-import: 15.1.0(postcss@8.5.6)
+      postcss-js: 4.1.0(postcss@8.5.6)
+      postcss-load-config: 4.0.2(postcss@8.5.6)
+      postcss-nested: 6.2.0(postcss@8.5.6)
+      postcss-selector-parser: 6.1.2
+      resolve: 1.22.11
+      sucrase: 3.35.0
+    transitivePeerDependencies:
+      - ts-node
 
   text-encoding-utf-8@1.0.2: {}
 
+  thenify-all@1.6.0:
+    dependencies:
+      thenify: 3.3.1
+
+  thenify@3.3.1:
+    dependencies:
+      any-promise: 1.3.0
+
   thread-stream@0.15.2:
     dependencies:
       real-require: 0.1.0
@@ -12366,6 +12873,8 @@ snapshots:
     dependencies:
       typescript: 5.9.3
 
+  ts-interface-checker@0.1.13: {}
+
   tsconfig-paths@3.15.0:
     dependencies:
       '@types/json5': 0.0.29
@@ -12422,13 +12931,13 @@ snapshots:
       possible-typed-array-names: 1.1.0
       reflect.getprototypeof: 1.0.10
 
-  typescript-eslint@8.46.2(eslint@9.38.0)(typescript@5.9.3):
+  typescript-eslint@8.46.2(eslint@9.38.0(jiti@1.21.7))(typescript@5.9.3):
     dependencies:
-      '@typescript-eslint/eslint-plugin': 8.46.2(@typescript-eslint/parser@8.46.2(eslint@9.38.0)(typescript@5.9.3))(eslint@9.38.0)(typescript@5.9.3)
-      '@typescript-eslint/parser': 8.46.2(eslint@9.38.0)(typescript@5.9.3)
+      '@typescript-eslint/eslint-plugin': 8.46.2(@typescript-eslint/parser@8.46.2(eslint@9.38.0(jiti@1.21.7))(typescript@5.9.3))(eslint@9.38.0(jiti@1.21.7))(typescript@5.9.3)
+      '@typescript-eslint/parser': 8.46.2(eslint@9.38.0(jiti@1.21.7))(typescript@5.9.3)
       '@typescript-eslint/typescript-estree': 8.46.2(typescript@5.9.3)
-      '@typescript-eslint/utils': 8.46.2(eslint@9.38.0)(typescript@5.9.3)
-      eslint: 9.38.0
+      '@typescript-eslint/utils': 8.46.2(eslint@9.38.0(jiti@1.21.7))(typescript@5.9.3)
+      eslint: 9.38.0(jiti@1.21.7)
       typescript: 5.9.3
     transitivePeerDependencies:
       - supports-color
@@ -12800,6 +13309,12 @@ snapshots:
       string-width: 4.2.3
       strip-ansi: 6.0.1
 
+  wrap-ansi@8.1.0:
+    dependencies:
+      ansi-styles: 6.2.3
+      string-width: 5.1.2
+      strip-ansi: 7.1.2
+
   wrappy@1.0.2: {}
 
   ws@7.5.10(bufferutil@4.0.9)(utf-8-validate@5.0.10):
@@ -12837,6 +13352,8 @@ snapshots:
 
   yallist@3.1.1: {}
 
+  yaml@2.8.1: {}
+
   yargs-parser@18.1.3:
     dependencies:
       camelcase: 5.3.1
diff --git a/postcss.config.cjs b/postcss.config.cjs
new file mode 100644
index 0000000..33ad091
--- /dev/null
+++ b/postcss.config.cjs
@@ -0,0 +1,6 @@
+module.exports = {
+  plugins: {
+    tailwindcss: {},
+    autoprefixer: {},
+  },
+}
diff --git a/src/app/api/trpc/[trpc]/route.ts b/src/app/api/trpc/[trpc]/route.ts
index 008e001..92891fe 100644
--- a/src/app/api/trpc/[trpc]/route.ts
+++ b/src/app/api/trpc/[trpc]/route.ts
@@ -1,22 +1,22 @@
-import { fetchRequestHandler } from '@trpc/server/adapters/fetch';
-import { appRouter } from '@/server/routers';
-import { createContext } from '@/server/trpc';
+import { fetchRequestHandler } from "@trpc/server/adapters/fetch";
+import { appRouter } from "@/server/routers";
+import { createContext } from "@/server/_core/context";
+import { NextRequest } from "next/server";
 
-const handler = (req: Request) =>
+const handler = (req: NextRequest) =>
   fetchRequestHandler({
-    endpoint: '/api/trpc',
+    endpoint: "/api/trpc",
     req,
     router: appRouter,
-    createContext,
+    createContext: () => createContext(req),
     onError:
-      process.env.NODE_ENV === 'development'
+      process.env.NODE_ENV === "development"
         ? ({ path, error }) => {
             console.error(
-              `❌ tRPC failed on ${path ?? '<no-path>'}: ${error.message}`
+              `❌ tRPC failed on ${path ?? "<no-path>"}: ${error.message}`
             );
           }
         : undefined,
   });
 
 export { handler as GET, handler as POST };
-
diff --git a/src/app/globals.css b/src/app/globals.css
index 7fd92e8..eff6db6 100644
--- a/src/app/globals.css
+++ b/src/app/globals.css
@@ -10,30 +10,30 @@
     --card-foreground: 222.2 84% 4.9%;
     --popover: 0 0% 100%;
     --popover-foreground: 222.2 84% 4.9%;
-    --primary: 355 74% 46%;
+    --primary: 262 83% 58%;
     --primary-foreground: 210 40% 98%;
-    --secondary: 39 50% 69%;
+    --secondary: 210 40% 96.1%;
     --secondary-foreground: 222.2 47.4% 11.2%;
     --muted: 210 40% 96.1%;
-    --muted-foreground: 215.4 16.3% 46.9%;
+    --muted-foreground: 215 20.2% 65.1%;
     --accent: 210 40% 96.1%;
     --accent-foreground: 222.2 47.4% 11.2%;
     --destructive: 0 84.2% 60.2%;
     --destructive-foreground: 210 40% 98%;
     --border: 214.3 31.8% 91.4%;
     --input: 214.3 31.8% 91.4%;
-    --ring: 355 74% 46%;
+    --ring: 262 83% 58%;
     --radius: 0.5rem;
   }
-
+  
   .dark {
-    --background: 260 4% 15%;
+    --background: 222.2 84% 4.9%;
     --foreground: 210 40% 98%;
     --card: 222.2 84% 4.9%;
     --card-foreground: 210 40% 98%;
     --popover: 222.2 84% 4.9%;
     --popover-foreground: 210 40% 98%;
-    --primary: 355 74% 46%;
+    --primary: 262 83% 58%;
     --primary-foreground: 222.2 47.4% 11.2%;
     --secondary: 217.2 32.6% 17.5%;
     --secondary-foreground: 210 40% 98%;
@@ -45,16 +45,15 @@
     --destructive-foreground: 210 40% 98%;
     --border: 217.2 32.6% 17.5%;
     --input: 217.2 32.6% 17.5%;
-    --ring: 355 74% 46%;
+    --ring: 262 83% 58%;
   }
-}
-
-@layer base {
+  
   * {
-    @apply border-border;
+    border-color: hsl(var(--border));
   }
+  
   body {
-    @apply bg-background text-foreground;
+    background-color: hsl(var(--background));
+    color: hsl(var(--foreground));
   }
 }
-
diff --git a/src/db/index.ts b/src/db/index.ts
new file mode 100644
index 0000000..01605e8
--- /dev/null
+++ b/src/db/index.ts
@@ -0,0 +1,17 @@
+import { drizzle } from 'drizzle-orm/mysql2';
+import mysql from 'mysql2/promise';
+import * as schema from './schema';
+
+// Create connection pool
+const pool = mysql.createPool({
+  uri: process.env.DATABASE_URL,
+  waitForConnections: true,
+  connectionLimit: 10,
+  queueLimit: 0,
+});
+
+// Create drizzle instance
+export const db = drizzle(pool, { schema, mode: 'default' });
+
+// Export schema
+export * from './schema';
diff --git a/src/db/schema.ts b/src/db/schema.ts
new file mode 100644
index 0000000..33f77a1
--- /dev/null
+++ b/src/db/schema.ts
@@ -0,0 +1,439 @@
+import { int, mysqlEnum, mysqlTable, text, timestamp, varchar, index, bigint, json, boolean, unique } from "drizzle-orm/mysql-core";
+
+/**
+ * Enhanced database schema with indexes for performance and soft deletes
+ * Indexes added on frequently queried fields
+ */
+
+export const users = mysqlTable("users", {
+  id: int("id").autoincrement().primaryKey(),
+  // Legacy Manus OAuth (nullable for migration)
+  openId: varchar("openId", { length: 64 }).unique(),
+  loginMethod: varchar("loginMethod", { length: 64 }),
+  
+  // Web3 wallet authentication
+  walletAddress: varchar("walletAddress", { length: 42 }).unique(),
+  
+  // Email/password authentication
+  email: varchar("email", { length: 320 }).unique(),
+  passwordHash: varchar("passwordHash", { length: 255 }),
+  emailVerified: boolean("emailVerified").default(false),
+  
+  // Profile information
+  username: varchar("username", { length: 64 }).unique(),
+  displayName: varchar("displayName", { length: 128 }),
+  name: text("name"), // Legacy field
+  avatar: text("avatar"),
+  
+  // OAuth providers
+  googleId: varchar("googleId", { length: 255 }).unique(),
+  
+  // Authorization
+  role: mysqlEnum("role", ["user", "admin"]).default("user").notNull(),
+  
+  // Timestamps
+  createdAt: timestamp("createdAt").defaultNow().notNull(),
+  updatedAt: timestamp("updatedAt").defaultNow().onUpdateNow().notNull(),
+  lastSignedIn: timestamp("lastSignedIn").defaultNow().notNull(),
+  deletedAt: timestamp("deletedAt"),
+}, (table) => ({
+  roleIdx: index("idx_role").on(table.role),
+  emailIdx: index("idx_email").on(table.email),
+  walletIdx: index("idx_wallet").on(table.walletAddress),
+  usernameIdx: index("idx_username").on(table.username),
+  googleIdx: index("idx_google").on(table.googleId),
+}));
+
+export type User = typeof users.$inferSelect;
+export type InsertUser = typeof users.$inferInsert;
+
+// Launchpad Projects with indexes and soft deletes
+export const launchpadProjects = mysqlTable("launchpad_projects", {
+  id: int("id").autoincrement().primaryKey(),
+  title: varchar("title", { length: 255 }).notNull(),
+  description: text("description").notNull(),
+  teamBackground: text("teamBackground"),
+  tokenomics: text("tokenomics"),
+  roadmap: text("roadmap"),
+  fundingAmount: int("fundingAmount").notNull(),
+  airdropAllocation: int("airdropAllocation"),
+  status: mysqlEnum("status", ["submitted", "review", "voting", "approved", "fundraising", "launched", "rejected"]).default("submitted").notNull(),
+  submittedBy: int("submittedBy").notNull(),
+  votesFor: int("votesFor").default(0),
+  votesAgainst: int("votesAgainst").default(0),
+  websiteUrl: varchar("websiteUrl", { length: 500 }),
+  tokenSymbol: varchar("tokenSymbol", { length: 20 }),
+  createdAt: timestamp("createdAt").defaultNow().notNull(),
+  updatedAt: timestamp("updatedAt").defaultNow().onUpdateNow().notNull(),
+  deletedAt: timestamp("deletedAt"),
+}, (table) => ({
+  statusIdx: index("idx_launchpad_status").on(table.status),
+  submittedByIdx: index("idx_launchpad_submitted_by").on(table.submittedBy),
+  createdAtIdx: index("idx_launchpad_created_at").on(table.createdAt),
+  statusCreatedIdx: index("idx_launchpad_status_created").on(table.status, table.createdAt),
+}));
+
+export type LaunchpadProject = typeof launchpadProjects.$inferSelect;
+export type InsertLaunchpadProject = typeof launchpadProjects.$inferInsert;
+
+// Development Grants with indexes and soft deletes
+export const developmentGrants = mysqlTable("development_grants", {
+  id: int("id").autoincrement().primaryKey(),
+  title: varchar("title", { length: 255 }).notNull(),
+  applicantName: varchar("applicantName", { length: 255 }).notNull(),
+  contactInfo: varchar("contactInfo", { length: 255 }),
+  description: text("description").notNull(),
+  valueProposition: text("valueProposition").notNull(),
+  deliverables: text("deliverables").notNull(),
+  roadmap: text("roadmap").notNull(),
+  fundingRequest: int("fundingRequest").notNull(),
+  receivingWallet: varchar("receivingWallet", { length: 100 }),
+  status: mysqlEnum("status", ["submitted", "review", "approved", "in_progress", "completed", "rejected"]).default("submitted").notNull(),
+  submittedBy: int("submittedBy").notNull(),
+  githubIssueUrl: varchar("githubIssueUrl", { length: 500 }),
+  githubIssueNumber: int("githubIssueNumber"),
+  githubIssueBody: text("githubIssueBody"),
+  githubIssueState: varchar("githubIssueState", { length: 20 }),
+  githubAuthor: varchar("githubAuthor", { length: 255 }),
+  githubAuthorAvatar: varchar("githubAuthorAvatar", { length: 500 }),
+  githubLabels: text("githubLabels"),
+  githubCommentCount: int("githubCommentCount").default(0),
+  createdAt: timestamp("createdAt").defaultNow().notNull(),
+  updatedAt: timestamp("updatedAt").defaultNow().onUpdateNow().notNull(),
+  deletedAt: timestamp("deletedAt"),
+}, (table) => ({
+  statusIdx: index("idx_grant_status").on(table.status),
+  submittedByIdx: index("idx_grant_submitted_by").on(table.submittedBy),
+  createdAtIdx: index("idx_grant_created_at").on(table.createdAt),
+  statusCreatedIdx: index("idx_grant_status_created").on(table.status, table.createdAt),
+}));
+
+export type DevelopmentGrant = typeof developmentGrants.$inferSelect;
+export type InsertDevelopmentGrant = typeof developmentGrants.$inferInsert;
+
+// Grant Milestones with indexes
+export const grantMilestones = mysqlTable("grant_milestones", {
+  id: int("id").autoincrement().primaryKey(),
+  grantId: int("grantId").notNull(),
+  title: varchar("title", { length: 255 }).notNull(),
+  description: text("description"),
+  amount: int("amount").notNull(),
+  status: mysqlEnum("status", ["pending", "in_progress", "submitted", "approved", "paid"]).default("pending").notNull(),
+  proofOfWork: text("proofOfWork"),
+  completedAt: timestamp("completedAt"),
+  createdAt: timestamp("createdAt").defaultNow().notNull(),
+  updatedAt: timestamp("updatedAt").defaultNow().onUpdateNow().notNull(),
+  deletedAt: timestamp("deletedAt"),
+}, (table) => ({
+  grantIdIdx: index("idx_milestone_grant_id").on(table.grantId),
+  statusIdx: index("idx_milestone_status").on(table.status),
+}));
+
+export type GrantMilestone = typeof grantMilestones.$inferSelect;
+export type InsertGrantMilestone = typeof grantMilestones.$inferInsert;
+
+// News Feed Items with indexes
+export const newsFeed = mysqlTable("news_feed", {
+  id: int("id").autoincrement().primaryKey(),
+  title: varchar("title", { length: 500 }).notNull(),
+  content: text("content"),
+  excerpt: text("excerpt"),
+  source: mysqlEnum("source", ["official", "telegram", "github", "partner", "community"]).notNull(),
+  category: varchar("category", { length: 100 }),
+  sourceUrl: varchar("sourceUrl", { length: 1000 }),
+  imageUrl: varchar("imageUrl", { length: 1000 }),
+  publishedAt: timestamp("publishedAt").notNull(),
+  createdAt: timestamp("createdAt").defaultNow().notNull(),
+  deletedAt: timestamp("deletedAt"),
+}, (table) => ({
+  sourceIdx: index("idx_news_source").on(table.source),
+  publishedAtIdx: index("idx_news_published_at").on(table.publishedAt),
+  categoryIdx: index("idx_news_category").on(table.category),
+}));
+
+export type NewsFeedItem = typeof newsFeed.$inferSelect;
+export type InsertNewsFeedItem = typeof newsFeed.$inferInsert;
+
+// Ecosystem Projects Directory with indexes and soft deletes
+export const ecosystemProjects = mysqlTable("ecosystem_projects", {
+  id: int("id").autoincrement().primaryKey(),
+  name: varchar("name", { length: 255 }).notNull(),
+  description: text("description").notNull(),
+  category: mysqlEnum("category", ["launchpad_alumni", "grant_recipient", "core_initiative"]).notNull(),
+  websiteUrl: varchar("websiteUrl", { length: 500 }),
+  logoUrl: varchar("logoUrl", { length: 500 }),
+  tokenSymbol: varchar("tokenSymbol", { length: 20 }),
+  fundingAmount: int("fundingAmount"),
+  airdropDetails: text("airdropDetails"),
+  status: varchar("status", { length: 50 }),
+  socialLinks: text("socialLinks"),
+  launchpadProjectId: int("launchpadProjectId"),
+  grantId: int("grantId"),
+  createdAt: timestamp("createdAt").defaultNow().notNull(),
+  updatedAt: timestamp("updatedAt").defaultNow().onUpdateNow().notNull(),
+  deletedAt: timestamp("deletedAt"),
+}, (table) => ({
+  categoryIdx: index("idx_ecosystem_category").on(table.category),
+  launchpadProjectIdIdx: index("idx_ecosystem_launchpad_id").on(table.launchpadProjectId),
+  grantIdIdx: index("idx_ecosystem_grant_id").on(table.grantId),
+}));
+
+export type EcosystemProject = typeof ecosystemProjects.$inferSelect;
+export type InsertEcosystemProject = typeof ecosystemProjects.$inferInsert;
+
+// Community Content with indexes and soft deletes
+export const communityContent = mysqlTable("community_content", {
+  id: int("id").autoincrement().primaryKey(),
+  title: varchar("title", { length: 500 }).notNull(),
+  contentType: mysqlEnum("contentType", ["article", "video", "thread", "reddit"]).notNull(),
+  contentUrl: varchar("contentUrl", { length: 1000 }).notNull(),
+  authorName: varchar("authorName", { length: 255 }),
+  excerpt: text("excerpt"),
+  upvotes: int("upvotes").default(0),
+  featured: int("featured").default(0),
+  submittedBy: int("submittedBy"),
+  createdAt: timestamp("createdAt").defaultNow().notNull(),
+  updatedAt: timestamp("updatedAt").defaultNow().onUpdateNow().notNull(),
+  deletedAt: timestamp("deletedAt"),
+}, (table) => ({
+  contentTypeIdx: index("idx_community_content_type").on(table.contentType),
+  upvotesIdx: index("idx_community_upvotes").on(table.upvotes),
+  submittedByIdx: index("idx_community_submitted_by").on(table.submittedBy),
+}));
+
+export type CommunityContent = typeof communityContent.$inferSelect;
+export type InsertCommunityContent = typeof communityContent.$inferInsert;
+
+// Votes with indexes
+export const votes = mysqlTable("votes", {
+  id: int("id").autoincrement().primaryKey(),
+  userId: int("userId").notNull(),
+  proposalType: mysqlEnum("proposalType", ["launchpad", "grant"]).notNull(),
+  proposalId: int("proposalId").notNull(),
+  voteChoice: mysqlEnum("voteChoice", ["for", "against"]).notNull(),
+  votingPower: int("votingPower").notNull(),
+  transactionHash: varchar("transactionHash", { length: 100 }),
+  createdAt: timestamp("createdAt").defaultNow().notNull(),
+}, (table) => ({
+  userProposalIdx: index("idx_vote_user_proposal").on(table.userId, table.proposalType, table.proposalId),
+  proposalIdx: index("idx_vote_proposal").on(table.proposalType, table.proposalId),
+}));
+
+export type Vote = typeof votes.$inferSelect;
+export type InsertVote = typeof votes.$inferInsert;
+
+// Governance Proposals with indexes
+export const proposals = mysqlTable("proposals", {
+  id: int("id").autoincrement().primaryKey(),
+  title: varchar("title", { length: 500 }).notNull(),
+  description: text("description").notNull(),
+  proposer: varchar("proposer", { length: 100 }).notNull(),
+  proposerUserId: int("proposerUserId"),
+  status: mysqlEnum("status", ["pending", "active", "passed", "rejected", "executed", "cancelled"]).default("pending").notNull(),
+  votesFor: int("votesFor").default(0).notNull(),
+  votesAgainst: int("votesAgainst").default(0).notNull(),
+  totalVotes: int("totalVotes").default(0).notNull(),
+  quorum: int("quorum").notNull(),
+  startDate: timestamp("startDate").notNull(),
+  endDate: timestamp("endDate").notNull(),
+  executionDate: timestamp("executionDate"),
+  transactionHash: varchar("transactionHash", { length: 100 }),
+  contractAddress: varchar("contractAddress", { length: 100 }),
+  proposalId: int("proposalId"),
+  isEncrypted: boolean("isEncrypted").default(false),
+  encryptedDataUri: varchar("encryptedDataUri", { length: 500 }),
+  metadataHash: varchar("metadataHash", { length: 66 }),
+  createdAt: timestamp("createdAt").defaultNow().notNull(),
+  updatedAt: timestamp("updatedAt").defaultNow().onUpdateNow().notNull(),
+  deletedAt: timestamp("deletedAt"),
+}, (table) => ({
+  statusIdx: index("idx_proposal_status").on(table.status),
+  proposerIdx: index("idx_proposal_proposer").on(table.proposer),
+  endDateIdx: index("idx_proposal_end_date").on(table.endDate),
+  statusEndDateIdx: index("idx_proposal_status_end_date").on(table.status, table.endDate),
+}));
+
+export type Proposal = typeof proposals.$inferSelect;
+export type InsertProposal = typeof proposals.$inferInsert;
+
+// Proposal Votes with indexes
+export const proposalVotes = mysqlTable("proposal_votes", {
+  id: int("id").autoincrement().primaryKey(),
+  proposalId: int("proposalId").notNull(),
+  userId: int("userId").notNull(),
+  voterAddress: varchar("voterAddress", { length: 100 }).notNull(),
+  voteChoice: mysqlEnum("voteChoice", ["for", "against", "abstain"]).notNull(),
+  votingPower: int("votingPower").notNull(),
+  transactionHash: varchar("transactionHash", { length: 100 }),
+  reason: text("reason"),
+  createdAt: timestamp("createdAt").defaultNow().notNull(),
+}, (table) => ({
+  proposalIdIdx: index("idx_proposal_vote_proposal_id").on(table.proposalId),
+  userProposalIdx: index("idx_proposal_vote_user_proposal").on(table.userId, table.proposalId),
+}));
+
+export type ProposalVote = typeof proposalVotes.$inferSelect;
+export type InsertProposalVote = typeof proposalVotes.$inferInsert;
+
+// Blockchain Events - for indexing on-chain events
+export const blockchainEvents = mysqlTable("blockchain_events", {
+  id: int("id").autoincrement().primaryKey(),
+  eventType: varchar("eventType", { length: 100 }).notNull(),
+  contractAddress: varchar("contractAddress", { length: 42 }).notNull(),
+  blockNumber: bigint("blockNumber", { mode: "number" }).notNull(),
+  transactionHash: varchar("transactionHash", { length: 66 }).notNull(),
+  eventData: json("eventData").notNull(),
+  processedAt: timestamp("processedAt").defaultNow(),
+}, (table) => ({
+  blockNumberIdx: index("idx_block_number").on(table.blockNumber),
+  contractIdx: index("idx_contract_address").on(table.contractAddress),
+  eventTypeIdx: index("idx_event_type").on(table.eventType),
+  txHashIdx: index("idx_transaction_hash").on(table.transactionHash),
+}));
+
+export type BlockchainEvent = typeof blockchainEvents.$inferSelect;
+export type InsertBlockchainEvent = typeof blockchainEvents.$inferInsert;
+
+// Indexer State - tracks last processed block for each contract
+export const indexerState = mysqlTable("indexer_state", {
+  id: int("id").autoincrement().primaryKey(),
+  contractAddress: varchar("contractAddress", { length: 42 }).notNull().unique(),
+  lastProcessedBlock: bigint("lastProcessedBlock", { mode: "number" }).notNull(),
+  updatedAt: timestamp("updatedAt").defaultNow().onUpdateNow(),
+});
+
+export type IndexerState = typeof indexerState.$inferSelect;
+export type InsertIndexerState = typeof indexerState.$inferInsert;
+
+// Delegates - for delegation tracking
+export const delegates = mysqlTable("delegates", {
+  id: int("id").autoincrement().primaryKey(),
+  address: varchar("address", { length: 42 }).notNull().unique(),
+  name: varchar("name", { length: 255 }),
+  bio: text("bio"),
+  avatarUrl: varchar("avatarUrl", { length: 500 }),
+  twitterHandle: varchar("twitterHandle", { length: 100 }),
+  websiteUrl: varchar("websiteUrl", { length: 500 }),
+  verified: boolean("verified").default(false),
+  votingPower: bigint("votingPower", { mode: "number" }).default(0),
+  delegatorCount: int("delegatorCount").default(0),
+  createdAt: timestamp("createdAt").defaultNow(),
+  updatedAt: timestamp("updatedAt").defaultNow().onUpdateNow(),
+}, (table) => ({
+  addressIdx: index("idx_delegate_address").on(table.address),
+  votingPowerIdx: index("idx_delegate_voting_power").on(table.votingPower),
+}));
+
+export type Delegate = typeof delegates.$inferSelect;
+export type InsertDelegate = typeof delegates.$inferInsert;
+
+// Delegations - tracks delegation history
+export const delegations = mysqlTable("delegations", {
+  id: int("id").autoincrement().primaryKey(),
+  delegator: varchar("delegator", { length: 42 }).notNull(),
+  delegate: varchar("delegate", { length: 42 }).notNull(),
+  amount: bigint("amount", { mode: "number" }).notNull(),
+  transactionHash: varchar("transactionHash", { length: 66 }).notNull(),
+  blockNumber: bigint("blockNumber", { mode: "number" }).notNull(),
+  createdAt: timestamp("createdAt").defaultNow(),
+}, (table) => ({
+  delegatorIdx: index("idx_delegator").on(table.delegator),
+  delegateIdx: index("idx_delegate").on(table.delegate),
+  uniqueDelegation: unique("unique_delegation").on(table.delegator, table.delegate),
+}));
+
+export type Delegation = typeof delegations.$inferSelect;
+export type InsertDelegation = typeof delegations.$inferInsert;
+
+// Token Prices - for price tracking
+export const tokenPrices = mysqlTable("token_prices", {
+  id: int("id").autoincrement().primaryKey(),
+  tokenAddress: varchar("tokenAddress", { length: 42 }).notNull(),
+  tokenSymbol: varchar("tokenSymbol", { length: 20 }).notNull(),
+  priceUsd: varchar("priceUsd", { length: 50 }).notNull(),
+  volume24h: varchar("volume24h", { length: 50 }),
+  marketCap: varchar("marketCap", { length: 50 }),
+  priceChange24h: varchar("priceChange24h", { length: 20 }),
+  source: varchar("source", { length: 100 }).notNull(),
+  createdAt: timestamp("createdAt").defaultNow(),
+}, (table) => ({
+  tokenAddressIdx: index("idx_token_address").on(table.tokenAddress),
+  createdAtIdx: index("idx_token_price_created_at").on(table.createdAt),
+  tokenTimeIdx: index("idx_token_time").on(table.tokenAddress, table.createdAt),
+}));
+
+export type TokenPrice = typeof tokenPrices.$inferSelect;
+export type InsertTokenPrice = typeof tokenPrices.$inferInsert;
+
+
+// Email Verification Tokens - for email verification
+export const emailVerificationTokens = mysqlTable("email_verification_tokens", {
+  id: int("id").autoincrement().primaryKey(),
+  userId: int("userId").notNull().references(() => users.id, { onDelete: "cascade" }),
+  token: varchar("token", { length: 255 }).notNull().unique(),
+  expiresAt: timestamp("expiresAt").notNull(),
+  createdAt: timestamp("createdAt").defaultNow().notNull(),
+}, (table) => ({
+  tokenIdx: index("idx_token").on(table.token),
+  userIdx: index("idx_user").on(table.userId),
+  expiresIdx: index("idx_expires").on(table.expiresAt),
+}));
+
+export type EmailVerificationToken = typeof emailVerificationTokens.$inferSelect;
+export type InsertEmailVerificationToken = typeof emailVerificationTokens.$inferInsert;
+
+// Password Reset Tokens - for password reset flow
+export const passwordResetTokens = mysqlTable("password_reset_tokens", {
+  id: int("id").autoincrement().primaryKey(),
+  userId: int("userId").notNull().references(() => users.id, { onDelete: "cascade" }),
+  token: varchar("token", { length: 255 }).notNull().unique(),
+  expiresAt: timestamp("expiresAt").notNull(),
+  createdAt: timestamp("createdAt").defaultNow().notNull(),
+  usedAt: timestamp("usedAt"),
+}, (table) => ({
+  tokenIdx: index("idx_token").on(table.token),
+  userIdx: index("idx_user").on(table.userId),
+  expiresIdx: index("idx_expires").on(table.expiresAt),
+}));
+
+export type PasswordResetToken = typeof passwordResetTokens.$inferSelect;
+export type InsertPasswordResetToken = typeof passwordResetTokens.$inferInsert;
+
+// Web3 Nonces - for SIWE (Sign-In with Ethereum) authentication
+export const web3Nonces = mysqlTable("web3_nonces", {
+  id: int("id").autoincrement().primaryKey(),
+  walletAddress: varchar("walletAddress", { length: 42 }).notNull(),
+  nonce: varchar("nonce", { length: 255 }).notNull().unique(),
+  expiresAt: timestamp("expiresAt").notNull(),
+  createdAt: timestamp("createdAt").defaultNow().notNull(),
+}, (table) => ({
+  walletIdx: index("idx_wallet").on(table.walletAddress),
+  nonceIdx: index("idx_nonce").on(table.nonce),
+  expiresIdx: index("idx_expires").on(table.expiresAt),
+}));
+
+export type Web3Nonce = typeof web3Nonces.$inferSelect;
+export type InsertWeb3Nonce = typeof web3Nonces.$inferInsert;
+
+
+// Grant Comments - GitHub issue comments for grants
+export const grantComments = mysqlTable("grant_comments", {
+  id: int("id").autoincrement().primaryKey(),
+  grantId: int("grantId").notNull(),
+  githubCommentId: bigint("githubCommentId", { mode: "number" }).notNull().unique(),
+  author: varchar("author", { length: 255 }).notNull(),
+  authorAvatar: varchar("authorAvatar", { length: 500 }),
+  body: text("body").notNull(),
+  bodyHtml: text("bodyHtml"),
+  reactions: text("reactions"), // JSON string of reactions
+  createdAt: timestamp("createdAt").notNull(),
+  updatedAt: timestamp("updatedAt").notNull(),
+}, (table) => ({
+  grantIdIdx: index("idx_grant_comment_grant_id").on(table.grantId),
+  githubCommentIdIdx: index("idx_grant_comment_github_id").on(table.githubCommentId),
+  createdAtIdx: index("idx_grant_comment_created_at").on(table.createdAt),
+}));
+
+export type GrantComment = typeof grantComments.$inferSelect;
+export type InsertGrantComment = typeof grantComments.$inferInsert;
+
diff --git a/src/lib/trpc/server.ts b/src/lib/trpc/server.ts
index f4e3be8..4d1692a 100644
--- a/src/lib/trpc/server.ts
+++ b/src/lib/trpc/server.ts
@@ -1,24 +1,23 @@
-import { createTRPCClient, httpBatchLink } from '@trpc/client';
-import type { AppRouter } from '@/server/routers';
-import superjson from 'superjson';
-import { cookies } from 'next/headers';
+import { createTRPCClient, httpBatchLink } from "@trpc/client";
+import type { AppRouter } from "@/server/routers";
+import superjson from "superjson";
+import { cookies } from "next/headers";
 
 export const serverClient = async () => {
   const cookieStore = await cookies();
-  const sessionCookie = cookieStore.get('session')?.value;
+  const sessionCookie = cookieStore.get("fushuma_session")?.value;
   
   return createTRPCClient<AppRouter>({
     links: [
       httpBatchLink({
-        url: `${process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000'}/api/trpc`,
+        url: `${process.env.NEXT_PUBLIC_APP_URL || "http://localhost:3001"}/api/trpc`,
         transformer: superjson,
         headers() {
           return {
-            cookie: sessionCookie ? `session=${sessionCookie}` : '',
+            cookie: sessionCookie ? `fushuma_session=${sessionCookie}` : "",
           };
         },
       }),
     ],
   });
 };
-
diff --git a/src/server/_core/context.ts b/src/server/_core/context.ts
new file mode 100644
index 0000000..6d8bb15
--- /dev/null
+++ b/src/server/_core/context.ts
@@ -0,0 +1,54 @@
+import { NextRequest } from "next/server";
+import { db } from "@/db";
+import { users } from "@/db/schema";
+import { eq } from "drizzle-orm";
+import { jwtVerify } from "jose";
+
+const JWT_SECRET = new TextEncoder().encode(
+  process.env.JWT_SECRET || "fushuma-secret-key-change-in-production"
+);
+
+export type User = {
+  id: number;
+  walletAddress: string | null;
+  username: string | null;
+  displayName: string | null;
+  avatar: string | null;
+  role: "user" | "admin";
+};
+
+export async function createContext(req: NextRequest) {
+  const sessionToken = req.cookies.get("fushuma_session")?.value;
+  
+  let user: User | null = null;
+  
+  if (sessionToken) {
+    try {
+      const verified = await jwtVerify(sessionToken, JWT_SECRET);
+      const userId = verified.payload.userId as number;
+      
+      const [dbUser] = await db
+        .select()
+        .from(users)
+        .where(eq(users.id, userId))
+        .limit(1);
+      
+      if (dbUser) {
+        user = {
+          id: dbUser.id,
+          walletAddress: dbUser.walletAddress,
+          username: dbUser.username,
+          displayName: dbUser.displayName,
+          avatar: dbUser.avatar,
+          role: dbUser.role,
+        };
+      }
+    } catch (error) {
+      console.error("Session verification failed:", error);
+    }
+  }
+  
+  return { user, db };
+}
+
+export type Context = Awaited<ReturnType<typeof createContext>>;
diff --git a/src/server/_core/public b/src/server/_core/public
new file mode 120000
index 0000000..a48d553
--- /dev/null
+++ b/src/server/_core/public
@@ -0,0 +1 @@
+../../dist/public
\ No newline at end of file
diff --git a/src/server/_core/trpc.ts b/src/server/_core/trpc.ts
new file mode 100644
index 0000000..8c337b5
--- /dev/null
+++ b/src/server/_core/trpc.ts
@@ -0,0 +1,27 @@
+import { initTRPC, TRPCError } from "@trpc/server";
+import { Context } from "./context";
+import superjson from "superjson";
+
+const t = initTRPC.context<Context>().create({
+  transformer: superjson,
+});
+
+export const router = t.router;
+export const publicProcedure = t.procedure;
+
+export const protectedProcedure = t.procedure.use(async ({ ctx, next }) => {
+  if (!ctx.user) {
+    throw new TRPCError({ code: "UNAUTHORIZED" });
+  }
+  return next({ ctx: { ...ctx, user: ctx.user } });
+});
+
+export const adminProcedure = t.procedure.use(async ({ ctx, next }) => {
+  if (!ctx.user) {
+    throw new TRPCError({ code: "UNAUTHORIZED" });
+  }
+  if (ctx.user.role !== "admin") {
+    throw new TRPCError({ code: "FORBIDDEN" });
+  }
+  return next({ ctx: { ...ctx, user: ctx.user } });
+});
diff --git a/src/server/_core/types/cookie.d.ts b/src/server/_core/types/cookie.d.ts
new file mode 100644
index 0000000..d6d4e88
--- /dev/null
+++ b/src/server/_core/types/cookie.d.ts
@@ -0,0 +1,6 @@
+declare module "cookie" {
+  export function parse(
+    str: string,
+    options?: Record<string, unknown>
+  ): Record<string, string>;
+}
diff --git a/src/server/_core/types/manusTypes.ts b/src/server/_core/types/manusTypes.ts
new file mode 100644
index 0000000..89a3819
--- /dev/null
+++ b/src/server/_core/types/manusTypes.ts
@@ -0,0 +1,69 @@
+// WebDev Auth TypeScript types
+// Auto-generated from protobuf definitions
+// Generated on: 2025-09-24T05:57:57.338Z
+
+export interface AuthorizeRequest {
+  redirectUri: string;
+  projectId: string;
+  state: string;
+  responseType: string;
+  scope: string;
+}
+
+export interface AuthorizeResponse {
+  redirectUrl: string;
+}
+
+export interface ExchangeTokenRequest {
+  grantType: string;
+  code: string;
+  refreshToken?: string;
+  clientId: string;
+  clientSecret?: string;
+  redirectUri: string;
+}
+
+export interface ExchangeTokenResponse {
+  accessToken: string;
+  tokenType: string;
+  expiresIn: number;
+  refreshToken?: string;
+  scope: string;
+  idToken: string;
+}
+
+export interface GetUserInfoRequest {
+  accessToken: string;
+}
+
+export interface GetUserInfoResponse {
+  openId: string;
+  projectId: string;
+  name: string;
+  email?: string | null;
+  platform?: string | null;
+  loginMethod?: string | null;
+}
+
+export interface CanAccessRequest {
+  openId: string;
+  projectId: string;
+}
+
+export interface CanAccessResponse {
+  canAccess: boolean;
+}
+
+export interface GetUserInfoWithJwtRequest {
+  jwtToken: string;
+  projectId: string;
+}
+
+export interface GetUserInfoWithJwtResponse {
+  openId: string;
+  projectId: string;
+  name: string;
+  email?: string | null;
+  platform?: string | null;
+  loginMethod?: string | null;
+}
diff --git a/src/server/_core/web3Auth.ts b/src/server/_core/web3Auth.ts
new file mode 100644
index 0000000..13a98c3
--- /dev/null
+++ b/src/server/_core/web3Auth.ts
@@ -0,0 +1,61 @@
+import { randomBytes } from "crypto";
+import { verifyMessage } from "viem";
+
+const nonceStore = new Map<string, { nonce: string; timestamp: number }>();
+const NONCE_EXPIRY = 5 * 60 * 1000;
+
+export function generateNonce(address: string): string {
+  const nonce = randomBytes(32).toString("hex");
+  nonceStore.set(address.toLowerCase(), { nonce, timestamp: Date.now() });
+  for (const [addr, data] of nonceStore.entries()) {
+    if (Date.now() - data.timestamp > NONCE_EXPIRY) {
+      nonceStore.delete(addr);
+    }
+  }
+  return nonce;
+}
+
+export function verifyNonce(address: string, nonce: string): boolean {
+  const stored = nonceStore.get(address.toLowerCase());
+  if (stored === undefined) return false;
+  if (Date.now() - stored.timestamp > NONCE_EXPIRY) {
+    nonceStore.delete(address.toLowerCase());
+    return false;
+  }
+  return stored.nonce === nonce;
+}
+
+export function generateSignInMessage(address: string, nonce: string): string {
+  return `Welcome to Fushuma Governance Hub!
+
+Sign this message to authenticate your wallet.
+
+Wallet: ${address}
+Nonce: ${nonce}
+
+This request will not trigger a blockchain transaction or cost any gas fees.`;
+}
+
+export async function verifyWalletSignature(
+  address: string,
+  message: string,
+  signature: string
+): Promise<boolean> {
+  try {
+    return await verifyMessage({
+      address: address as `0x${string}`,
+      message,
+      signature: signature as `0x${string}`,
+    });
+  } catch {
+    return false;
+  }
+}
+
+export function isValidEthereumAddress(address: string): boolean {
+  return /^0x[a-fA-F0-9]{40}$/.test(address);
+}
+
+export function clearNonce(address: string): void {
+  nonceStore.delete(address.toLowerCase());
+}
diff --git a/src/server/index.ts b/src/server/index.ts
new file mode 100644
index 0000000..6b1430c
--- /dev/null
+++ b/src/server/index.ts
@@ -0,0 +1,4 @@
+import { appRouter } from "./routers";
+
+export { appRouter };
+export type { AppRouter } from "./routers";
diff --git a/src/server/routers/auth.ts b/src/server/routers/auth.ts
new file mode 100644
index 0000000..88b0296
--- /dev/null
+++ b/src/server/routers/auth.ts
@@ -0,0 +1,149 @@
+import { z } from "zod";
+import { router, publicProcedure, protectedProcedure } from "../_core/trpc";
+import {
+  generateNonce,
+  generateSignInMessage,
+  verifyNonce,
+  verifyWalletSignature,
+  isValidEthereumAddress,
+  clearNonce,
+} from "../_core/web3Auth";
+import { users } from "@/db/schema";
+import { eq } from "drizzle-orm";
+import { SignJWT } from "jose";
+import { TRPCError } from "@trpc/server";
+
+const JWT_SECRET = new TextEncoder().encode(
+  process.env.JWT_SECRET || "fushuma-secret-key-change-in-production"
+);
+
+export const authRouter = router({
+  me: publicProcedure.query(({ ctx }) => ctx.user),
+
+  getNonce: publicProcedure
+    .input(z.object({ address: z.string() }))
+    .mutation(({ input }) => {
+      if (!isValidEthereumAddress(input.address)) {
+        throw new TRPCError({
+          code: "BAD_REQUEST",
+          message: "Invalid Ethereum address",
+        });
+      }
+      const nonce = generateNonce(input.address);
+      const message = generateSignInMessage(input.address, nonce);
+      return { nonce, message };
+    }),
+
+  signIn: publicProcedure
+    .input(
+      z.object({
+        address: z.string(),
+        signature: z.string(),
+        message: z.string(),
+      })
+    )
+    .mutation(async ({ input, ctx }) => {
+      const { address, signature, message } = input;
+
+      if (!isValidEthereumAddress(address)) {
+        throw new TRPCError({
+          code: "BAD_REQUEST",
+          message: "Invalid Ethereum address",
+        });
+      }
+
+      const nonceMatch = message.match(/Nonce: ([a-f0-9]+)/);
+      if (!nonceMatch) {
+        throw new TRPCError({
+          code: "BAD_REQUEST",
+          message: "Invalid message format",
+        });
+      }
+
+      const nonce = nonceMatch[1];
+      if (!verifyNonce(address, nonce)) {
+        throw new TRPCError({
+          code: "BAD_REQUEST",
+          message: "Invalid or expired nonce",
+        });
+      }
+
+      const isValid = await verifyWalletSignature(address, message, signature);
+      if (!isValid) {
+        throw new TRPCError({
+          code: "UNAUTHORIZED",
+          message: "Invalid signature",
+        });
+      }
+
+      clearNonce(address);
+
+      let [user] = await ctx.db
+        .select()
+        .from(users)
+        .where(eq(users.walletAddress, address.toLowerCase()))
+        .limit(1);
+
+      if (!user) {
+        [user] = await ctx.db
+          .insert(users)
+          .values({
+            walletAddress: address.toLowerCase(),
+            role: "user",
+            lastSignedIn: new Date(),
+          })
+          .$returningId()
+          .then(async (ids) => {
+            return ctx.db
+              .select()
+              .from(users)
+              .where(eq(users.id, ids[0].id))
+              .limit(1);
+          });
+      } else {
+        await ctx.db
+          .update(users)
+          .set({ lastSignedIn: new Date() })
+          .where(eq(users.id, user.id));
+      }
+
+      const token = await new SignJWT({ userId: user.id })
+        .setProtectedHeader({ alg: "HS256" })
+        .setExpirationTime("7d")
+        .sign(JWT_SECRET);
+
+      return {
+        success: true,
+        token,
+        user: {
+          id: user.id,
+          walletAddress: user.walletAddress,
+          username: user.username,
+          displayName: user.displayName,
+          avatar: user.avatar,
+          role: user.role,
+        },
+      };
+    }),
+
+  logout: publicProcedure.mutation(() => {
+    return { success: true };
+  }),
+
+  updateProfile: protectedProcedure
+    .input(
+      z.object({
+        username: z.string().min(3).max(64).optional(),
+        displayName: z.string().max(128).optional(),
+        avatar: z.string().url().optional(),
+      })
+    )
+    .mutation(async ({ input, ctx }) => {
+      await ctx.db
+        .update(users)
+        .set(input)
+        .where(eq(users.id, ctx.user.id));
+
+      return { success: true };
+    }),
+});
diff --git a/src/server/routers/grants.ts b/src/server/routers/grants.ts
new file mode 100644
index 0000000..4a19171
--- /dev/null
+++ b/src/server/routers/grants.ts
@@ -0,0 +1,97 @@
+import { z } from "zod";
+import { router, publicProcedure, protectedProcedure, adminProcedure } from "../_core/trpc";
+import { developmentGrants } from "@/db/schema";
+import { eq, desc, and, isNull } from "drizzle-orm";
+
+export const grantsRouter = router({
+  list: publicProcedure
+    .input(
+      z.object({
+        limit: z.number().min(1).max(100).optional().default(20),
+        offset: z.number().min(0).optional().default(0),
+        status: z.enum(["submitted", "review", "approved", "in_progress", "completed", "rejected"]).optional(),
+      })
+    )
+    .query(async ({ input, ctx }) => {
+      const { limit, offset, status } = input;
+      
+      const where = and(
+        isNull(developmentGrants.deletedAt),
+        status ? eq(developmentGrants.status, status) : undefined
+      );
+      
+      const grants = await ctx.db
+        .select()
+        .from(developmentGrants)
+        .where(where)
+        .orderBy(desc(developmentGrants.createdAt))
+        .limit(limit)
+        .offset(offset);
+      
+      return grants;
+    }),
+
+  getById: publicProcedure
+    .input(z.object({ id: z.number().int().positive() }))
+    .query(async ({ input, ctx }) => {
+      const [grant] = await ctx.db
+        .select()
+        .from(developmentGrants)
+        .where(
+          and(
+            eq(developmentGrants.id, input.id),
+            isNull(developmentGrants.deletedAt)
+          )
+        )
+        .limit(1);
+      
+      if (!grant) {
+        throw new Error("Grant not found");
+      }
+      
+      return grant;
+    }),
+
+  create: protectedProcedure
+    .input(
+      z.object({
+        title: z.string().min(5).max(255),
+        applicantName: z.string().min(2).max(255),
+        contactInfo: z.string().max(255).optional(),
+        description: z.string().min(50).max(10000),
+        valueProposition: z.string().min(50).max(5000),
+        deliverables: z.string().min(50).max(5000),
+        roadmap: z.string().min(50).max(5000),
+        fundingRequest: z.number().int().positive(),
+        receivingWallet: z.string().regex(/^0x[a-fA-F0-9]{40}$/).optional(),
+      })
+    )
+    .mutation(async ({ input, ctx }) => {
+      const [result] = await ctx.db
+        .insert(developmentGrants)
+        .values({
+          ...input,
+          submittedBy: ctx.user.id,
+          status: "submitted",
+        })
+        .$returningId();
+      
+      return { success: true, id: result.id };
+    }),
+
+  updateStatus: adminProcedure
+    .input(
+      z.object({
+        id: z.number().int().positive(),
+        status: z.enum(["submitted", "review", "approved", "in_progress", "completed", "rejected"]),
+      })
+    )
+    .mutation(async ({ input, ctx }) => {
+      await ctx.db
+        .update(developmentGrants)
+        .set({ status: input.status })
+        .where(eq(developmentGrants.id, input.id));
+      
+      return { success: true };
+    }),
+});
diff --git a/src/server/routers/index.ts b/src/server/routers/index.ts
new file mode 100644
index 0000000..7c375b6
--- /dev/null
+++ b/src/server/routers/index.ts
@@ -0,0 +1,12 @@
+import { router } from "../_core/trpc";
+import { authRouter } from "./auth";
+import { grantsRouter } from "./grants";
+import { newsRouter } from "./news";
+
+export const appRouter = router({
+  auth: authRouter,
+  grants: grantsRouter,
+  news: newsRouter,
+});
+
+export type AppRouter = typeof appRouter;
diff --git a/src/server/routers/news.ts b/src/server/routers/news.ts
new file mode 100644
index 0000000..dcad86b
--- /dev/null
+++ b/src/server/routers/news.ts
@@ -0,0 +1,116 @@
+import { z } from "zod";
+import { router, publicProcedure } from "../_core/trpc";
+import { newsFeed as news } from "@/db/schema";
+import { eq, desc, and, isNull, like, or } from "drizzle-orm";
+
+export const newsRouter = router({
+  list: publicProcedure
+    .input(
+      z.object({
+        limit: z.number().min(1).max(100).optional().default(20),
+        offset: z.number().min(0).optional().default(0),
+        category: z.string().optional(),
+      })
+    )
+    .query(async ({ input, ctx }) => {
+      const { limit, offset, category } = input;
+      
+      const where = and(
+        isNull(news.deletedAt),
+        category ? eq(news.category, category) : undefined
+      );
+      
+      const items = await ctx.db
+        .select()
+        .from(news)
+        .where(where)
+        .orderBy(desc(news.publishedAt))
+        .limit(limit)
+        .offset(offset);
+      
+      return items;
+    }),
+
+  getById: publicProcedure
+    .input(z.object({ id: z.number().int().positive() }))
+    .query(async ({ input, ctx }) => {
+      const [item] = await ctx.db
+        .select()
+        .from(news)
+        .where(
+          and(
+            eq(news.id, input.id),
+            isNull(news.deletedAt)
+          )
+        )
+        .limit(1);
+      
+      if (!item) {
+        throw new Error("News not found");
+      }
+      
+      return item;
+    }),
+
+  getCategories: publicProcedure.query(async ({ ctx }) => {
+    const items = await ctx.db.select().from(news);
+    
+    const categoryCounts = items.reduce((acc, item) => {
+      const cat = item.category || "uncategorized";
+      acc[cat] = (acc[cat] || 0) + 1;
+      return acc;
+    }, {} as Record<string, number>);
+    
+    return Object.entries(categoryCounts).map(([id, count]) => ({
+      id,
+      name: id.charAt(0).toUpperCase() + id.slice(1),
+      count,
+    }));
+  }),
+
+  getTrending: publicProcedure
+    .input(
+      z.object({
+        limit: z.number().min(1).max(20).optional().default(5),
+        days: z.number().min(1).max(30).optional().default(7),
+      })
+    )
+    .query(async ({ input, ctx }) => {
+      const items = await ctx.db
+        .select()
+        .from(news)
+        .where(isNull(news.deletedAt))
+        .orderBy(desc(news.publishedAt))
+        .limit(input.limit);
+      
+      return items;
+    }),
+
+  search: publicProcedure
+    .input(
+      z.object({
+        query: z.string().min(1),
+        limit: z.number().min(1).max(50).optional().default(10),
+      })
+    )
+    .query(async ({ input, ctx }) => {
+      const searchTerm = `%${input.query}%`;
+      
+      const items = await ctx.db
+        .select()
+        .from(news)
+        .where(
+          and(
+            isNull(news.deletedAt),
+            or(
+              like(news.title, searchTerm),
+              like(news.content, searchTerm),
+              like(news.excerpt, searchTerm)
+            )
+          )
+        )
+        .limit(input.limit);
+      
+      return items;
+    }),
+});
diff --git a/src/server/validation.ts b/src/server/validation.ts
new file mode 100644
index 0000000..ea0ed1e
--- /dev/null
+++ b/src/server/validation.ts
@@ -0,0 +1,175 @@
+import { z } from "zod";
+
+/**
+ * Validation schemas for input data
+ * Provides comprehensive validation for security and data integrity
+ */
+
+// Ethereum address validation (0x followed by 40 hex characters)
+export const ethereumAddressSchema = z
+  .string()
+  .regex(/^0x[a-fA-F0-9]{40}$/, "Invalid Ethereum address format")
+  .describe("Ethereum wallet address");
+
+// URL validation with reasonable length limits
+export const urlSchema = z
+  .string()
+  .url("Invalid URL format")
+  .max(1000, "URL too long")
+  .describe("Valid HTTP/HTTPS URL");
+
+// Funding amount validation (reasonable min/max constraints)
+export const fundingAmountSchema = z
+  .number()
+  .int("Funding amount must be an integer")
+  .min(100, "Minimum funding amount is 100")
+  .max(10000000, "Maximum funding amount is 10,000,000")
+  .describe("Funding amount in FUMA tokens");
+
+// Token symbol validation
+export const tokenSymbolSchema = z
+  .string()
+  .min(1, "Token symbol required")
+  .max(10, "Token symbol too long")
+  .regex(/^[A-Z0-9]+$/, "Token symbol must be uppercase letters and numbers only")
+  .describe("Token symbol (e.g., FUMA, ETH)");
+
+// Title validation
+export const titleSchema = z
+  .string()
+  .min(10, "Title must be at least 10 characters")
+  .max(500, "Title must be less than 500 characters")
+  .describe("Title of the item");
+
+// Description validation
+export const descriptionSchema = z
+  .string()
+  .min(50, "Description must be at least 50 characters")
+  .max(10000, "Description must be less than 10,000 characters")
+  .describe("Detailed description");
+
+// Short description/excerpt validation
+export const excerptSchema = z
+  .string()
+  .min(1, "Excerpt required")
+  .max(500, "Excerpt must be less than 500 characters")
+  .describe("Short excerpt or summary");
+
+// Email validation
+export const emailSchema = z
+  .string()
+  .email("Invalid email format")
+  .max(320, "Email too long")
+  .describe("Email address");
+
+// Name validation
+export const nameSchema = z
+  .string()
+  .min(1, "Name required")
+  .max(255, "Name too long")
+  .describe("Name");
+
+// Contact info validation
+export const contactInfoSchema = z
+  .string()
+  .min(1, "Contact info required")
+  .max(500, "Contact info too long")
+  .describe("Contact information");
+
+// Date range validation helper
+export const dateRangeSchema = z
+  .object({
+    startDate: z.date(),
+    endDate: z.date(),
+  })
+  .refine((data) => data.endDate > data.startDate, {
+    message: "End date must be after start date",
+    path: ["endDate"],
+  });
+
+// Voting power validation
+export const votingPowerSchema = z
+  .number()
+  .int("Voting power must be an integer")
+  .positive("Voting power must be positive")
+  .max(1000000000, "Voting power exceeds maximum")
+  .describe("Voting power based on token holdings");
+
+// Transaction hash validation (0x followed by 64 hex characters)
+export const transactionHashSchema = z
+  .string()
+  .regex(/^0x[a-fA-F0-9]{64}$/, "Invalid transaction hash format")
+  .describe("Blockchain transaction hash");
+
+// Pagination schemas
+export const paginationSchema = z.object({
+  limit: z.number().int().min(1).max(100).default(20).describe("Number of items per page"),
+  offset: z.number().int().min(0).default(0).describe("Number of items to skip"),
+});
+
+export const cursorPaginationSchema = z.object({
+  limit: z.number().int().min(1).max(100).default(20).describe("Number of items per page"),
+  cursor: z.number().int().optional().describe("Cursor for pagination"),
+});
+
+// Status enums with validation
+export const grantStatusSchema = z.enum([
+  "submitted",
+  "review",
+  "approved",
+  "in_progress",
+  "completed",
+  "rejected",
+]);
+
+export const launchpadStatusSchema = z.enum([
+  "submitted",
+  "review",
+  "voting",
+  "approved",
+  "fundraising",
+  "launched",
+  "rejected",
+]);
+
+export const proposalStatusSchema = z.enum([
+  "pending",
+  "active",
+  "passed",
+  "rejected",
+  "executed",
+  "cancelled",
+]);
+
+export const milestoneStatusSchema = z.enum([
+  "pending",
+  "in_progress",
+  "submitted",
+  "approved",
+  "paid",
+]);
+
+// Filter schemas
+export const grantFilterSchema = z.object({
+  status: grantStatusSchema.optional(),
+  submittedBy: z.number().int().optional(),
+  minAmount: z.number().int().optional(),
+  maxAmount: z.number().int().optional(),
+});
+
+export const proposalFilterSchema = z.object({
+  status: proposalStatusSchema.optional(),
+  proposer: ethereumAddressSchema.optional(),
+});
+
+// Sort schemas
+export const sortOrderSchema = z.enum(["asc", "desc"]).default("desc");
+
+export const sortBySchema = z.enum([
+  "createdAt",
+  "updatedAt",
+  "fundingAmount",
+  "votesFor",
+  "votesAgainst",
+]);
+
diff --git a/src/shared/const.ts b/src/shared/const.ts
new file mode 100644
index 0000000..e030aeb
--- /dev/null
+++ b/src/shared/const.ts
@@ -0,0 +1,46 @@
+// Cookie configuration
+export const COOKIE_NAME = 'fushuma_session';
+export const ONE_YEAR_MS = 365 * 24 * 60 * 60 * 1000;
+
+// Application constants
+export const APP_NAME = 'Fushuma Governance Hub';
+export const APP_DESCRIPTION = 'The nexus for community interaction, governance, and economic activity';
+
+// Pagination defaults
+export const DEFAULT_PAGE_SIZE = 20;
+export const MAX_PAGE_SIZE = 100;
+
+// Vote types
+export const VOTE_TYPE = {
+  FOR: 'for',
+  AGAINST: 'against',
+  ABSTAIN: 'abstain',
+} as const;
+
+// Status enums
+export const PROPOSAL_STATUS = {
+  DRAFT: 'draft',
+  ACTIVE: 'active',
+  PASSED: 'passed',
+  REJECTED: 'rejected',
+  EXECUTED: 'executed',
+} as const;
+
+export const GRANT_STATUS = {
+  SUBMITTED: 'submitted',
+  REVIEW: 'review',
+  APPROVED: 'approved',
+  IN_PROGRESS: 'in_progress',
+  COMPLETED: 'completed',
+  REJECTED: 'rejected',
+} as const;
+
+export const LAUNCHPAD_STATUS = {
+  SUBMITTED: 'submitted',
+  REVIEW: 'review',
+  VOTING: 'voting',
+  APPROVED: 'approved',
+  FUNDRAISING: 'fundraising',
+  LAUNCHED: 'launched',
+  REJECTED: 'rejected',
+} as const;
diff --git a/start.sh b/start.sh
new file mode 100755
index 0000000..266e824
--- /dev/null
+++ b/start.sh
@@ -0,0 +1,4 @@
+#!/bin/bash
+export PORT=3001
+export NODE_ENV=production
+exec ./node_modules/.bin/next start -p 3001
diff --git a/tsconfig.json b/tsconfig.json
index 1d89170..f3331ea 100644
--- a/tsconfig.json
+++ b/tsconfig.json
@@ -27,10 +27,13 @@
         "./src/*"
       ],
       "@/server/*": [
-        "./server/*"
+        "./src/server/*"
       ],
-      "@/drizzle/*": [
-        "./drizzle/*"
+      "@/db/*": [
+        "./src/db/*"
+      ],
+      "@shared/*": [
+        "./src/shared/*"
       ]
     }
   },
-- 
2.43.0

